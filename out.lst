001   0000             ; 4 channels sample player Z80 driver
002   0000             ; it can mix up to 4 samples (8 bit signed) at a fixed 16 Khz rate
003   0000             ; with volume support (16 levels du to memory limitation)
004   0000             ; address and size of samples have to be 256 bytes boundary
005   0000             ; the driver does support "cutoff" when mixing so you can use true 8 bits samples :)
006   0000             ; Stéphane Dallongeville @2011
007   0000             ;
008   0000             ; we have to do 223 cycles per sample output which consist of :
009   0000             ; - read 4 samples from the rom and mix them in output buffer (~177 cycles)
010   0000             ; - output the obtained sample to the DAC (26 cycles)
011   0000             ; - handle loop (18 cycles)
012   0000             ;
013   0000             ; register usage :
014   0000             ; SP  = sample source (in ROM)
015   0000             ; HL  = mix buffer
016   0000             ; BC  = $7F00 (used for mix overflow stuff)
017   0000             ; HL' = YMPORT0
018   0000             ; BC' = read buffer
019   0000             
020   0000             
021   0000             ; ###########################      define      ##############################
022   0000             
023   0000                         INCLUDE "z80_def.i80"   ; basic definitions
001+  0000             ; ############################ define ##############################
002+  0000             
003+  0000             YMPORT0     EQU     $4000           ; YM2612 port 0
004+  0000             YMPORT1     EQU     $4001           ; YM2612 port 1
005+  0000             YMPORT2     EQU     $4002           ; YM2612 port 2
006+  0000             YMPORT3     EQU     $4003           ; YM2612 port 3
007+  0000             PSGPORT     EQU     $7F11           ; PSG port
008+  0000             BANKREG     EQU     $6000           ; bank register
009+  0000             
010+  0000             COMPLAY_SFT EQU     0               ; start play command
011+  0000             COMSTOP_SFT EQU     4               ; stop play command
012+  0000             
013+  0000             STATPLAY_SFT  EQU   0               ; playing status
014+  0000             STATREADY_SFT EQU   7               ; driver ready status
015+  0000             
016+  0000             CH0_SFT     EQU     0               ; channel 0
017+  0000             CH1_SFT     EQU     1               ; channel 1
018+  0000             CH2_SFT     EQU     2               ; channel 2
019+  0000             CH3_SFT     EQU     3               ; channel 3
020+  0000             
021+  0000             COMPLAY     EQU     1<<COMPLAY_SFT
022+  0000             COMSTOP     EQU     1<<COMSTOP_SFT
023+  0000             
024+  0000             STATPLAY    EQU     1<<STATPLAY_SFT
025+  0000             STATREADY   EQU     1<<STATREADY_SFT
026+  0000             
027+  0000             CH0         EQU     1<<CH0_SFT
028+  0000             CH1         EQU     1<<CH1_SFT
029+  0000             CH2         EQU     1<<CH2_SFT
030+  0000             CH3         EQU     1<<CH3_SFT
031+  0000             
032+  0000             
033+  0000             ; ########################### variable #############################
034+  0000             
035+  0000             COMMAND     EQU     $0100           ; command from 68K
036+  0000             STATUS      EQU     $0102           ; status from Z80
037+  0000             PARAMS      EQU     $0104           ; parameters (68K and Z80)
024   0000             
025   0000             
026   0000             ; ###########################       var        ##############################
027   0000             
028   0000             WAVADR      EQU     PARAMS+$00      ; WAV address (bit 8 --> bit 23)
029   0000             WAVLEN      EQU     PARAMS+$02      ; WAV lenght (bit 8 --> bit 23)
030   0000             IWAVADR     EQU     PARAMS+$10      ; internal WAV address (bit 8 --> bit 23)
031   0000             IWAVLEN     EQU     PARAMS+$12      ; internal WAV lenght (bit 8 --> bit 23)
032   0000             
033   0000             WAVVOL      EQU     PARAMS+$20      ; WAV volume (0 = min --> 15 = max)
034   0000             
035   0000             NULLWAVADR  EQU     PARAMS+$24      ; silent WAV adr
036   0000             NULLWAVLEN  EQU     PARAMS+$26      ; silent WAV len
037   0000             
038   0000             WRITEBUF    EQU     PARAMS+$28
039   0000             READBUF     EQU     PARAMS+$2A
040   0000             
041   0000             WAVBUFFER0  EQU     $0E00           ; WAV buffer 0
042   0000             WAVBUFFER1  EQU     $0F00           ; WAV buffer 1
043   0000             VOLUMETAB   EQU     $1000           ; volume table (256 * 16)
044   0000             
045   0000             
046   0000             ; ###########################      macro       ##############################
047   0000             
048   0000                         INCLUDE "z80_mac.i80"  ; basic macros
001+  0000             ; ############################     macro     ##############################
002+  0000             
003+  0000             ; setBankFast
004+  0000             ; -----------
005+  0000             ; A    -> bit 21-15 of rom address to set in the bank register
006+  0000             ; HL  <-  BANKREG
007+  0000             ;
008+  0000             ; set the bank register for ROM area
009+  0000             ; = 97 cycles
010+  0000             
011+  0000                         macro   setBankFast
012+  0000~            
013+  0000~                        LD  HL, BANKREG         ; HL = BANKREG              ' 10
014+  0000~                        LD  (HL), A             ; #1 (bit 15)               ' 7
015+  0000~                        RRA                     ;                           ' 4
016+  0000~                        LD  (HL), A             ; #2 (bit 16)               ' 7
017+  0000~                        RRA                     ;                           ' 4
018+  0000~                        LD  (HL), A             ; #3 (bit 17)               ' 7
019+  0000~                        RRA                     ;                           ' 4
020+  0000~                        LD  (HL), A             ; #4 (bit 18)               ' 7
021+  0000~                        RRA                     ;                           ' 4
022+  0000~                        LD  (HL), A             ; #5 (bit 19)               ' 7
023+  0000~                        RRA                     ;                           ' 4
024+  0000~                        LD  (HL), A             ; #6 (bit 20)               ' 7
025+  0000~                        RRA                     ;                           ' 4
026+  0000~                        LD  (HL), A             ; #7 (bit 21)               ' 7
027+  0000~                        LD  (HL), L             ; #8 (bit 22 = 0)           ' 7
028+  0000~                        LD  (HL), L             ; #9 (bit 23 = 0)           ' 7
029+  0000~            
030+  0000                         endm                    ;                           ' 97
031+  0000             
032+  0000             
033+  0000             ; writeYM
034+  0000             ; -------
035+  0000             ; HL   -> YM port where to write
036+  0000             ; D    -> address
037+  0000             ; E    -> value
038+  0000             ;
039+  0000             ; write to YM2612
040+  0000             
041+  0000                         macro   writeYM
042+  0000~            
043+  0000~            .wait0
044+  0000~                        BIT     7, (HL)         ; test YM not busy
045+  0000~                        JR      NZ, .wait0
046+  0000~                        LD      (HL), D         ; write address
047+  0000~            .wait1
048+  0000~                        BIT     7, (HL)         ; test YM not busy
049+  0000~                        JR      NZ, .wait1
050+  0000~                        INC     L
051+  0000~                        LD      (HL), E         ; write value
052+  0000~            
053+  0000                         endm
054+  0000             
055+  0000             
056+  0000             ; getPlayCommand
057+  0000             ; --------------
058+  0000             ; HL  <-  point to COMMAND
059+  0000             ; zf  <-  channel 'ch' play command
060+  0000             ;
061+  0000             ; Z flag reset if play command for channel 'ch'
062+  0000             ; = 22 cycles
063+  0000             
064+  0000                         macro   getPlayCommand ch
065+  0000~            
066+  0000~                        LD      HL, COMMAND             ;                   ' 10
067+  0000~                        BIT     COMPLAY_SFT+ch, (HL)    ; play command ?    ' 12
068+  0000~            
069+  0000                         endm                            ;                   ' 22
070+  0000             
071+  0000             
072+  0000             ; getStopCommand
073+  0000             ; --------------
074+  0000             ; HL  <-  point to COMMAND
075+  0000             ; zf  <-  channel 'ch' stop command
076+  0000             ;
077+  0000             ; Z flag reset if stop command for channel 'ch'
078+  0000             ; = 22 cycles
079+  0000             
080+  0000                         macro   getStopCommand ch
081+  0000~            
082+  0000~                        LD      HL, COMMAND             ;                   ' 10
083+  0000~                        BIT     COMSTOP_SFT+ch, (HL)    ; stop command ?    ' 12
084+  0000~            
085+  0000                         endm                            ;                   ' 22
086+  0000             
087+  0000             
088+  0000             ; setPlayCommand
089+  0000             ; ----------------
090+  0000             ; HL  <-  point to COMMAND
091+  0000             ;
092+  0000             ; set the play command for channel 'ch'
093+  0000             ; = 25 cycles
094+  0000             
095+  0000                         macro   setPlayCommand ch
096+  0000~            
097+  0000~                        LD      HL, COMMAND             ;                   ' 10
098+  0000~                        SET     COMPLAY_SFT+ch, (HL)    ; set command       ' 15
099+  0000~            
100+  0000                         endm                            ;                   ' 25
101+  0000             
102+  0000             
103+  0000             ; setStopCommand
104+  0000             ; ----------------
105+  0000             ; HL  <-  point to COMMAND
106+  0000             ;
107+  0000             ; set the stop command for channel 'ch'
108+  0000             ; = 25 cycles
109+  0000             
110+  0000                         macro   setStopCommand ch
111+  0000~            
112+  0000~                        LD      HL, COMMAND             ;                   ' 10
113+  0000~                        SET     COMSTOP_SFT+ch, (HL)    ; set command       ' 15
114+  0000~            
115+  0000                         endm                            ;                   ' 25
116+  0000             
117+  0000             
118+  0000             ; clearPlayCommand
119+  0000             ; ----------------
120+  0000             ; HL  <-  point to COMMAND
121+  0000             ;
122+  0000             ; clear the play command for channel 'ch'
123+  0000             ; = 25 cycles
124+  0000             
125+  0000                         macro   clearPlayCommand ch
126+  0000~            
127+  0000~                        LD      HL, COMMAND             ;                   ' 10
128+  0000~                        RES     COMPLAY_SFT+ch, (HL)    ; clear command     ' 15
129+  0000~            
130+  0000                         endm                            ;                   ' 25
131+  0000             
132+  0000             
133+  0000             ; clearStopCommand
134+  0000             ; ----------------
135+  0000             ; HL  <-  point to COMMAND
136+  0000             ;
137+  0000             ; clear the stop command for channel 'ch'
138+  0000             ; = 25 cycles
139+  0000             
140+  0000                         macro   clearStopCommand ch
141+  0000~            
142+  0000~                        LD      HL, COMMAND             ;                   ' 10
143+  0000~                        RES     COMSTOP_SFT+ch, (HL)    ; clear command     ' 15
144+  0000~            
145+  0000                         endm                            ;                   ' 25
146+  0000             
147+  0000             
148+  0000             ; getPlayStatus
149+  0000             ; -------------
150+  0000             ; HL  <- point to STATUS
151+  0000             ; zf  <-  channel 'ch' is playing
152+  0000             ;
153+  0000             ; Z flag reset if play status for channel 'ch'
154+  0000             ; = 22 cycles
155+  0000             
156+  0000                         macro   getPlayStatus ch
157+  0000~            
158+  0000~                        LD      HL, STATUS              ;                   ' 10
159+  0000~                        BIT     STATPLAY_SFT+ch, (HL)   ; get status        ' 12
160+  0000~            
161+  0000                         endm                            ;                   ' 22
162+  0000             
163+  0000             
164+  0000             ; setPlayStatus
165+  0000             ; -------------
166+  0000             ; HL  <- point to STATUS
167+  0000             ;
168+  0000             ; set the play status for channel 'ch'
169+  0000             ; = 25 cycles
170+  0000             
171+  0000                         macro   setPlayStatus ch
172+  0000~            
173+  0000~                        LD      HL, STATUS              ;                   ' 10
174+  0000~                        SET     STATPLAY_SFT+ch, (HL)   ; set status        ' 15
175+  0000~            
176+  0000                         endm                            ;                   ' 25
177+  0000             
178+  0000             
179+  0000             ; clearPlayStatus
180+  0000             ; -----------
181+  0000             ; HL  <- point to STATUS
182+  0000             ;
183+  0000             ; clear play status for channel 'ch'
184+  0000             ; = 25 cycles
185+  0000             
186+  0000                         macro   clearPlayStatus ch
187+  0000~            
188+  0000~                        LD      HL, STATUS              ;                   ' 10
189+  0000~                        RES     STATPLAY_SFT+ch, (HL)   ; clear status      ' 15
190+  0000~            
191+  0000                         endm                            ;                   ' 25
192+  0000             
193+  0000             
194+  0000             ; getLoopStatus
195+  0000             ; -------------
196+  0000             ; HL  <- point to STATUS+1
197+  0000             ; zf  <-  channel 'ch' is playing
198+  0000             ;
199+  0000             ; Z flag reset if loop status for channel 'ch'
200+  0000             ; = 22 cycles
201+  0000             
202+  0000                         macro   getLoopStatus ch
203+  0000~            
204+  0000~                        LD      HL, STATUS+1            ;                   ' 10
205+  0000~                        BIT     STATPLAY_SFT+ch, (HL)   ; get status        ' 12
206+  0000~            
207+  0000                         endm                            ;                   ' 22
208+  0000             
209+  0000             
210+  0000             ; setLoopStatus
211+  0000             ; -------------
212+  0000             ; HL  <- point to STATUS+1
213+  0000             ;
214+  0000             ; set the loop status for channel 'ch'
215+  0000             ; = 25 cycles
216+  0000             
217+  0000                         macro   setLoopStatus ch
218+  0000~            
219+  0000~                        LD      HL, STATUS+1            ;                   ' 10
220+  0000~                        SET     STATPLAY_SFT+ch, (HL)   ; set status        ' 15
221+  0000~            
222+  0000                         endm                            ;                   ' 25
223+  0000             
224+  0000             
225+  0000             ; clearLoopStatus
226+  0000             ; -----------
227+  0000             ; HL  <- point to STATUS+1
228+  0000             ;
229+  0000             ; clear loop status for channel 'ch'
230+  0000             ; = 25 cycles
231+  0000             
232+  0000                         macro   clearLoopStatus ch
233+  0000~            
234+  0000~                        LD      HL, STATUS+1            ;                   ' 10
235+  0000~                        RES     STATPLAY_SFT+ch, (HL)   ; clear status      ' 15
236+  0000~            
237+  0000                         endm                            ;                   ' 25
238+  0000             
239+  0000             
240+  0000             ; ############################  macro wait macro  ##############################
241+  0000             
242+  0000             ; wait14x7
243+  0000             ; --------
244+  0000             ; wait for ((w * 14) + 7) cycles
245+  0000             ;
246+  0000                         macro   wait14x7 w
247+  0000~            
248+  0000~                        LD      A, w            ; 7
249+  0000~            .loop
250+  0000~                        DEC     A               ; 4
251+  0000~                        JP      NZ, .loop       ; 10
252+  0000~            
253+  0000                         endm
254+  0000             
255+  0000             
256+  0000                         macro   wait4
257+  0000~                        NOP
258+  0000                         endm
259+  0000             
260+  0000                         macro   wait6
261+  0000~                        INC     DE
262+  0000                         endm
263+  0000             
264+  0000                         macro   wait7
265+  0000~                        OR      $0
266+  0000                         endm
267+  0000             
268+  0000                         macro   wait8
269+  0000~                        wait4
270+  0000~                        wait4
271+  0000                         endm
272+  0000             
273+  0000                         macro   wait9
274+  0000~                        LD      A, R
275+  0000                         endm
276+  0000             
277+  0000                         macro   wait10
278+  0000~                        INC     IY
279+  0000                         endm
280+  0000             
281+  0000                         macro   wait11
282+  0000~                        wait7
283+  0000~                        wait4
284+  0000                         endm
285+  0000             
286+  0000                         macro   wait12
287+  0000~                        wait8
288+  0000~                        wait4
289+  0000                         endm
290+  0000             
291+  0000                         macro   wait13
292+  0000~                        wait9
293+  0000~                        wait4
294+  0000                         endm
295+  0000             
296+  0000                         macro   wait14
297+  0000~                        wait10
298+  0000~                        wait4
299+  0000                         endm
300+  0000             
301+  0000                         macro   wait15
302+  0000~                        wait8
303+  0000~                        wait7
304+  0000                         endm
305+  0000             
306+  0000                         macro   wait16
307+  0000~                        wait12
308+  0000~                        wait4
309+  0000                         endm
310+  0000             
311+  0000                         macro   wait17
312+  0000~                        wait10
313+  0000~                        wait7
314+  0000                         endm
315+  0000             
316+  0000                         macro   wait18
317+  0000~                        wait14
318+  0000~                        wait4
319+  0000                         endm
320+  0000             
321+  0000                         macro   wait19
322+  0000~                        wait12
323+  0000~                        wait7
324+  0000                         endm
325+  0000             
326+  0000                         macro   wait20
327+  0000~                        wait16
328+  0000~                        wait4
329+  0000                         endm
330+  0000             
331+  0000                         macro   wait21
332+  0000~                        wait14x7 1
333+  0000                         endm
334+  0000             
335+  0000                         macro   wait22
336+  0000~                        wait18
337+  0000~                        wait4
338+  0000                         endm
339+  0000             
340+  0000                         macro   wait23
341+  0000~                        wait16
342+  0000~                        wait7
343+  0000                         endm
344+  0000             
345+  0000                         macro   wait24
346+  0000~                        wait20
347+  0000~                        wait4
348+  0000                         endm
349+  0000             
350+  0000                         macro   wait25
351+  0000~                        wait21
352+  0000~                        wait4
353+  0000                         endm
354+  0000             
355+  0000                         macro   wait26
356+  0000~                        wait22
357+  0000~                        wait4
358+  0000                         endm
359+  0000             
360+  0000                         macro   wait27
361+  0000~                        wait20
362+  0000~                        wait7
363+  0000                         endm
364+  0000             
365+  0000                         macro   wait28
366+  0000~                        wait21
367+  0000~                        wait7
368+  0000                         endm
369+  0000             
370+  0000                         macro   wait30
371+  0000~                        wait22
372+  0000~                        wait8
373+  0000                         endm
374+  0000             
375+  0000                         macro   wait31
376+  0000~                        wait21
377+  0000~                        wait10
378+  0000                         endm
379+  0000             
380+  0000                         macro   wait32
381+  0000~                        wait20
382+  0000~                        wait12
383+  0000                         endm
384+  0000             
385+  0000                         macro   wait33
386+  0000~                        wait21
387+  0000~                        wait12
388+  0000                         endm
389+  0000             
390+  0000                         macro   wait34
391+  0000~                        wait22
392+  0000~                        wait12
393+  0000                         endm
394+  0000             
395+  0000                         macro   wait35
396+  0000~                        wait14x7 2
397+  0000                         endm
398+  0000             
399+  0000                         macro   wait36
400+  0000~                        wait32
401+  0000~                        wait4
402+  0000                         endm
403+  0000             
404+  0000                         macro   wait37
405+  0000~                        wait21
406+  0000~                        wait16
407+  0000                         endm
408+  0000             
409+  0000                         macro   wait39
410+  0000~                        wait35
411+  0000~                        wait4
412+  0000                         endm
413+  0000             
414+  0000                         macro   wait38
415+  0000~                        wait21
416+  0000~                        wait17
417+  0000                         endm
418+  0000             
419+  0000                         macro   wait40
420+  0000~                        wait21
421+  0000~                        wait19
422+  0000                         endm
423+  0000             
424+  0000                         macro   wait41
425+  0000~                        wait21
426+  0000~                        wait20
427+  0000                         endm
428+  0000             
429+  0000                         macro   wait42
430+  0000~                        wait35
431+  0000~                        wait7
432+  0000                         endm
433+  0000             
434+  0000                         macro   wait43
435+  0000~                        wait35
436+  0000~                        wait8
437+  0000                         endm
438+  0000             
439+  0000                         macro   wait46
440+  0000~                        wait35
441+  0000~                        wait11
442+  0000                         endm
443+  0000             
444+  0000                         macro   wait47
445+  0000~                        wait35
446+  0000~                        wait12
447+  0000                         endm
448+  0000             
449+  0000                         macro   wait48
450+  0000~                        wait40
451+  0000~                        wait8
452+  0000                         endm
453+  0000             
454+  0000                         macro   wait49
455+  0000~                        wait14x7 3
456+  0000                         endm
457+  0000             
458+  0000                         macro   wait51
459+  0000~                        wait35
460+  0000~                        wait16
461+  0000                         endm
462+  0000             
463+  0000                         macro   wait52
464+  0000~                        wait36
465+  0000~                        wait16
466+  0000                         endm
467+  0000             
468+  0000                         macro   wait53
469+  0000~                        wait49
470+  0000~                        wait4
471+  0000                         endm
472+  0000             
473+  0000                         macro   wait55
474+  0000~                        wait51
475+  0000~                        wait4
476+  0000                         endm
477+  0000             
478+  0000                         macro   wait56
479+  0000~                        wait49
480+  0000~                        wait7
481+  0000                         endm
482+  0000             
483+  0000                         macro   wait57
484+  0000~                        wait49
485+  0000~                        wait8
486+  0000                         endm
487+  0000             
488+  0000                         macro   wait59
489+  0000~                        wait49
490+  0000~                        wait10
491+  0000                         endm
492+  0000             
493+  0000                         macro   wait60
494+  0000~                        wait49
495+  0000~                        wait11
496+  0000                         endm
497+  0000             
498+  0000                         macro   wait62
499+  0000~                        wait49
500+  0000~                        wait13
501+  0000                         endm
502+  0000             
503+  0000                         macro   wait63
504+  0000~                        wait14x7 4
505+  0000                         endm
506+  0000             
507+  0000                         macro   wait64
508+  0000~                        wait49
509+  0000~                        wait15
510+  0000                         endm
511+  0000             
512+  0000                         macro   wait65
513+  0000~                        wait49
514+  0000~                        wait16
515+  0000                         endm
516+  0000             
517+  0000                         macro   wait66
518+  0000~                        wait49
519+  0000~                        wait17
520+  0000                         endm
521+  0000             
522+  0000                         macro   wait72
523+  0000~                        wait63
524+  0000~                        wait9
525+  0000                         endm
526+  0000             
527+  0000                         macro   wait75
528+  0000~                        wait63
529+  0000~                        wait12
530+  0000                         endm
531+  0000             
532+  0000                         macro   wait77
533+  0000~                        wait14x7 5
534+  0000                         endm
535+  0000             
536+  0000                         macro   wait79
537+  0000~                        wait63
538+  0000~                        wait16
539+  0000                         endm
540+  0000             
541+  0000                         macro   wait81
542+  0000~                        wait77
543+  0000~                        wait4
544+  0000                         endm
545+  0000             
546+  0000                         macro   wait82
547+  0000~                        wait63
548+  0000~                        wait19
549+  0000                         endm
550+  0000             
551+  0000                         macro   wait83
552+  0000~                        wait63
553+  0000~                        wait20
554+  0000                         endm
555+  0000             
556+  0000                         macro   wait84
557+  0000~                        wait77
558+  0000~                        wait7
559+  0000                         endm
560+  0000             
561+  0000                         macro   wait85
562+  0000~                        wait77
563+  0000~                        wait8
564+  0000                         endm
565+  0000             
566+  0000                         macro   wait86
567+  0000~                        wait77
568+  0000~                        wait9
569+  0000                         endm
570+  0000             
571+  0000                         macro   wait89
572+  0000~                        wait77
573+  0000~                        wait12
574+  0000                         endm
575+  0000             
576+  0000                         macro   wait91
577+  0000~                        wait14x7 6
578+  0000                         endm
579+  0000             
580+  0000                         macro   wait92
581+  0000~                        wait77
582+  0000~                        wait15
583+  0000                         endm
584+  0000             
585+  0000                         macro   wait96
586+  0000~                        wait77
587+  0000~                        wait19
588+  0000                         endm
589+  0000             
590+  0000                         macro   wait97
591+  0000~                        wait77
592+  0000~                        wait20
593+  0000                         endm
594+  0000             
595+  0000                         macro   wait99
596+  0000~                        wait91
597+  0000~                        wait8
598+  0000                         endm
599+  0000             
600+  0000                         macro   wait100
601+  0000~                        wait91
602+  0000~                        wait9
603+  0000                         endm
604+  0000             
605+  0000                         macro   wait104
606+  0000~                        wait91
607+  0000~                        wait13
608+  0000                         endm
609+  0000             
610+  0000                         macro   wait105
611+  0000~                        wait14x7 7
612+  0000                         endm
613+  0000             
614+  0000                         macro   wait106
615+  0000~                        wait91
616+  0000~                        wait15
617+  0000                         endm
618+  0000             
619+  0000                         macro   wait107
620+  0000~                        wait91
621+  0000~                        wait16
622+  0000                         endm
623+  0000             
624+  0000                         macro   wait111
625+  0000~                        wait91
626+  0000~                        wait20
627+  0000                         endm
628+  0000             
629+  0000                         macro   wait116
630+  0000~                        wait105
631+  0000~                        wait11
632+  0000                         endm
633+  0000             
634+  0000                         macro   wait117
635+  0000~                        wait105
636+  0000~                        wait12
637+  0000                         endm
638+  0000             
639+  0000                         macro   wait119
640+  0000~                        wait14x7 8
641+  0000                         endm
642+  0000             
643+  0000                         macro   wait121
644+  0000~                        wait117
645+  0000~                        wait4
646+  0000                         endm
647+  0000             
648+  0000                         macro   wait122
649+  0000~                        wait111
650+  0000~                        wait11
651+  0000                         endm
652+  0000             
653+  0000                         macro   wait123
654+  0000~                        wait119
655+  0000~                        wait4
656+  0000                         endm
657+  0000             
658+  0000                         macro   wait131
659+  0000~                        wait119
660+  0000~                        wait12
661+  0000                         endm
662+  0000             
663+  0000                         macro   wait132
664+  0000~                        wait119
665+  0000~                        wait13
666+  0000                         endm
667+  0000             
668+  0000                         macro   wait133
669+  0000~                        wait14x7 9
670+  0000                         endm
671+  0000             
672+  0000                         macro   wait136
673+  0000~                        wait119
674+  0000~                        wait17
675+  0000                         endm
676+  0000             
677+  0000                         macro   wait141
678+  0000~                        wait133
679+  0000~                        wait8
680+  0000                         endm
681+  0000             
682+  0000                         macro   wait175
683+  0000~                        wait14x7 12
684+  0000                         endm
685+  0000             
686+  0000                         macro   wait182
687+  0000~                        wait175
688+  0000~                        wait7
689+  0000                         endm
690+  0000             
691+  0000                         macro   wait183
692+  0000~                        wait175
693+  0000~                        wait8
694+  0000                         endm
695+  0000             
696+  0000                         macro   wait187
697+  0000~                        wait175
698+  0000~                        wait12
699+  0000                         endm
700+  0000             
701+  0000                         macro   wait189
702+  0000~                        wait14x7 13
703+  0000                         endm
704+  0000             
705+  0000                         macro   wait193
706+  0000~                        wait189
707+  0000~                        wait4
708+  0000                         endm
709+  0000             
710+  0000                         macro   wait197
711+  0000~                        wait189
712+  0000~                        wait8
713+  0000                         endm
049   0000             
050   0000             
051   0000             ; copyChannelParams
052   0000             ; -----------------
053   0000             ; copy channel parameters to internal structure
054   0000             ; = 64 cycles
055   0000             
056   0000                         macro copyChannelParams ch
057   0000~            
058   0000~                        LD      HL, (WAVADR+(ch*4))     ;                   ' 16
059   0000~                        LD      (IWAVADR+(ch*4)), HL    ;                   ' 16
060   0000~                        LD      HL, (WAVLEN+(ch*4))     ;                   ' 16
061   0000~                        LD      (IWAVLEN+(ch*4)), HL    ;                   ' 16
062   0000~            
063   0000                         endm                            ;                   ' 64
064   0000             
065   0000             ; stopChannel
066   0000             ; -----------
067   0000             ; set null sample play for channel 'ch'
068   0000             ; = 114 cycles
069   0000             
070   0000                         macro stopChannel ch
071   0000~            
072   0000~                        LD      HL, (NULLWAVADR)        ;                   ' 16
073   0000~                        LD      (IWAVADR+(ch*4)), HL    ;                   ' 16
074   0000~                        LD      HL, (NULLWAVLEN)        ;                   ' 16
075   0000~                        LD      (IWAVLEN+(ch*4)), HL    ;                   ' 16
076   0000~                        clearPlayStatus ch              ; clear play status ' 25
077   0000~                        clearLoopStatus ch              ; clear loop status ' 25
078   0000~            
079   0000                         endm                            ;                   ' 114
080   0000             
081   0000             
082   0000             ; handlePlayCommand
083   0000             ; -----------------
084   0000             ; HL  <-  ?
085   0000             ; DE  <-  ?
086   0000             ;
087   0000             ; handle play command for channel 'ch'
088   0000             ; = 146 cycles
089   0000             
090   0000                         macro handlePlayCommand ch
091   0000~            
092   0000~                        getPlayCommand ch           ; play command ?        ' 22
093   0000~                        JP      NZ, .do_command     ;                       ' 10    (32)
094   0000~            
095   0000~                        wait104                     ;                       ' 104   (136)
096   0000~                        JP      .end                ;                       ' 10    (146)
097   0000~            
098   0000~            .do_command
099   0000~                        clearPlayCommand ch         ; clear play command    ' 25    (57)
100   0000~                        copyChannelParams ch        ; copy params           ' 64
101   0000~                        setPlayStatus ch            ; set play status       ' 25
102   0000~            
103   0000~            .end
104   0000                         endm                        ;                       ' 146
105   0000             
106   0000             
107   0000             ; prepareVolume
108   0000             ; -------------
109   0000             ; HL  <-  ?
110   0000             ; A   <-  ?
111   0000             ; B   <-  point to volume LUT (high part)
112   0000             ;
113   0000             ; prepare B for volume ajustement
114   0000             ; = 28 cycles
115   0000             
116   0000                         macro prepareVolume ch
117   0000~            
118   0000~                        LD      HL, WAVVOL+ch       ; point to volume info  ' 10
119   0000~                        LD      A, (HL)             ; A = volume            ' 7
120   0000~                        OR      $10                 ; ajusted for LUT       ' 7
121   0000~                        LD      B, A                ; save to B             ' 4
122   0000~            
123   0000                         endm                        ;                       ' 28
124   0000             
125   0000             
126   0000             ; prepareChannel
127   0000             ; --------------
128   0000             ; SP  <-  point to the sample source
129   0000             ; HL  <-  point to write buffer
130   0000             ; A   <-  ?
131   0000             ; E   <-  ?
132   0000             ;
133   0000             ; set bank and prepare registers to play channel 'ch'
134   0000             ; = 182 cycles
135   0000             
136   0000                         macro prepareChannel ch
137   0000~            
138   0000~                        LD      HL, IWAVADR+(ch*4)  ; point to sample adr   ' 10
139   0000~                        LD      A, (HL)             ; A = bit 8-15          ' 7
140   0000~                        LD      E, A                ; save to E             ' 4
141   0000~                        INC     L                   ;                       ' 4
142   0000~                        RLA                         ; C flag = bit 15       ' 4
143   0000~                        LD      A, (HL)             ; A = bit 16-23         ' 7
144   0000~                        RLA                         ; A = bit 15-22         ' 4     (40)
145   0000~                        setBankFast                 ; set bank              ' 97    (137)
146   0000~            
147   0000~                        LD      A, E                ; A = bit 8-15          ' 4
148   0000~                        OR      $80                 ; A = $80 | bit 8-14    ' 7
149   0000~                        LD      H, A                ;                       ' 4
150   0000~                        XOR     A                   ;                       ' 4
151   0000~                        LD      L, A                ; L = $00               ' 4
152   0000~                        LD      SP, HL              ; SP = sample src       ' 6
153   0000~                        LD      HL, (WRITEBUF)      ;                       ' 16    (182)
154   0000~            
155   0000                         endm                        ;                       ' 182
156   0000             
157   0000             
158   0000             ; updateChannelData
159   0000             ; -----------------
160   0000             ; HL  <-  ?
161   0000             ;
162   0000             ; update sample address and sample lenght
163   0000             ; = 76 cycles
164   0000             
165   0000                         macro updateChannelData ch
166   0000~            
167   0000~                        LD      HL, (IWAVADR+(ch*4))    ; increment address ' 16
168   0000~                        INC     HL                      ;                   ' 6
169   0000~                        LD      (IWAVADR+(ch*4)), HL    ;                   ' 16    (38)
170   0000~            
171   0000~                        LD      HL, (IWAVLEN+(ch*4))    ; decrement lenght  ' 16
172   0000~                        DEC     HL                      ;                   ' 6
173   0000~                        LD      (IWAVLEN+(ch*4)), HL    ;                   ' 16    (76)
174   0000~            
175   0000                         endm
176   0000             
177   0000             ; checkChannelEnd
178   0000             ; ---------------
179   0000             ; HL  <-  ?
180   0000             ; A   <-  ?
181   0000             ;
182   0000             ; check is sample is done, restart it if needed
183   0000             ; = 180 cycles
184   0000             
185   0000                         macro checkChannelEnd ch
186   0000~            
187   0000~                        LD      HL, (IWAVLEN+(ch*4))    ; get sample lenght ' 16
188   0000~                        LD      A, H                    ;                   ' 4
189   0000~                        OR      L                       ;                   ' 4
190   0000~                        JP      Z, .done                ; sample done ?     ' 10    (34)
191   0000~            
192   0000~                        wait136                         ;                   ' 136   (170)
193   0000~                        JP      .end                    ;                   ' 10    (180)
194   0000~            
195   0000~            .done
196   0000~                        getLoopStatus ch            ; loop play ?           ' 22    (56)
197   0000~                        JP      Z, .stop            ;                       ' 10    (66)
198   0000~            
199   0000~                        copyChannelParams ch        ; copy params           ' 64    (130)
200   0000~                        wait40                      ;                       ' 40
201   0000~                        JP      .end                ;                       ' 10    (180)
202   0000~            
203   0000~            .stop
204   0000~                        stopChannel ch              ;                       ' 114   (180)
205   0000~            
206   0000~            .end
207   0000                         endm                        ;                       ' 180
208   0000             
209   0000             
210   0000             ; swapBuffer
211   0000             ; ----------
212   0000             ; HL  <-  point to new write buffer
213   0000             ; DE  <-  point to new read buffer
214   0000             ;
215   0000             ; switch read and write buffer
216   0000             ; = 72 cycles
217   0000             
218   0000                         macro swapBuffer
219   0000~            
220   0000~                        LD      HL, (WRITEBUF)      ;                       ' 16
221   0000~                        LD      DE, (READBUF)       ;                       ' 20
222   0000~                        LD      (WRITEBUF), DE      ;                       ' 20
223   0000~                        LD      (READBUF), HL       ;                       ' 16
224   0000~            
225   0000                         endm                        ;                       ' 72
226   0000             
227   0000             
228   0000             ; sampleOutput
229   0000             ; ------------
230   0000             ; HL'  -> YMPORT1
231   0000             ; BC' <-> point to play output buffer
232   0000             ; D    -> $80
233   0000             ;
234   0000             ; output a sample to the DAC
235   0000             ; = 30 cycles
236   0000             
237   0000                         macro sampleOutput
238   0000~            
239   0000~                        EXX                     ;                           ' 4
240   0000~                        LD      A, (BC)         ; read sample from buffer   ' 7
241   0000~                        ADD     D               ; unsign                    ' 4
242   0000~                        INC     C               ; increment with looping    ' 4
243   0000~                        LD      (HL), A         ; play sample               ' 7
244   0000~                        EXX                     ;                           ' 4
245   0000~            
246   0000                         endm                    ;                           ' 30
247   0000             
248   0000             
249   0000             ; doEnvAndClear
250   0000             ; = 18 cycles
251   0000             
252   0000                         macro doEnvAndClear
253   0000~            
254   0000~                        LD      A, (BC)         ; compute volume            ' 7
255   0000~                        LD      (HL), A         ; write in output buffer    ' 7
256   0000~                        INC     L               ; next                      ' 4
257   0000~            
258   0000                         endm
259   0000             
260   0000             ; readAndClear2
261   0000             ; -------------
262   0000             ; SP  <-> point to the sample source (ROM)
263   0000             ; HL  <-> point to the write output buffer
264   0000             ; BC   -> point to envelop LUT
265   0000             ; DE  <-  ?
266   0000             ;
267   0000             ; read 2 samples from the ROM, apply volume
268   0000             ; and write them in output buffer
269   0000             ; = 56 cycles
270   0000             
271   0000                         macro readAndClear2
272   0000~            
273   0000~                        POP     DE              ; read 2 samples from ROM   ' 10+2
274   0000~                        LD      C, E            ; first sample              ' 4
275   0000~                        doEnvAndClear           ;                           ' 18
276   0000~                        LD      C, D            ; second sample             ' 4
277   0000~                        doEnvAndClear           ;                           ' 18
278   0000~            
279   0000                         endm                    ;                           ' 56
280   0000             
281   0000             
282   0000             ; readAndClear20WhilePlay3
283   0000             ; ------------------------
284   0000             ; SP  <-> point to the sample source (ROM)
285   0000             ; HL  <-> point to the write output buffer
286   0000             ; BC   -> point to envelop LUT
287   0000             ; DE  <-  ?
288   0000             ;
289   0000             ; read 20 samples from the ROM, apply volume
290   0000             ; and write them in output buffer while playing 3 samples
291   0000             ; = 666 cycles
292   0000             
293   0000                         macro readAndClear20WhilePlay3
294   0000~            
295   0000~                        ; 1 --------------------
296   0000~            
297   0000~                        sampleOutput            ;                           ' 30
298   0000~            
299   0000~                        readAndClear2           ;                           ' 56    |
300   0000~                        readAndClear2           ;                           ' 56    | 168 (198)
301   0000~                        readAndClear2           ;                           ' 56    |
302   0000~            
303   0000~                        ; 4 --------------------
304   0000~            
305   0000~                        POP     DE              ; read 2 samples from ROM   ' 10+2  |
306   0000~                        LD      C, E            ; first sample              ' 4     | 25 (223)
307   0000~                        wait9                   ; synchro                   ' 9     |
308   0000~            
309   0000~                        sampleOutput            ; (1*223)+0 --> perfect     ' 30 (253)
310   0000~            
311   0000~                        doEnvAndClear           ;                           ' 18    |
312   0000~                        LD      C, D            ; second sample             ' 4     | 40 (293)
313   0000~                        doEnvAndClear           ;                           ' 18    |
314   0000~            
315   0000~                        readAndClear2           ;                           ' 56    | 112 (405)
316   0000~                        readAndClear2           ;                           ' 56    |
317   0000~            
318   0000~                        ; 7 --------------------
319   0000~            
320   0000~                        POP     DE              ; read 2 samples from ROM   ' 10+2  |
321   0000~                        LD      C, E            ; first sample              ' 4     | 34 (446)
322   0000~                        doEnvAndClear           ;                           ' 18    |
323   0000~                        wait7                   ; synchro                   ' 7     |
324   0000~            
325   0000~                        sampleOutput            ; (2*223)+0 --> perfect     ' 30 (476)
326   0000~            
327   0000~                        LD      C, D            ; second sample             ' 4     | 22 (498)
328   0000~                        doEnvAndClear           ;                           ' 18    |
329   0000~            
330   0000~                        readAndClear2           ;                           ' 56    |
331   0000~                        readAndClear2           ;                           ' 56    | 168 (666)
332   0000~                        readAndClear2           ;                           ' 56    |
333   0000~            
334   0000                         endm                    ;                           ' 666
335   0000             
336   0000             
337   0000             ; doEnvAndMix
338   0000             ; = 35 --> 49 cycles
339   0000             
340   0000                         macro doEnvAndMix
341   0000~            
342   0000~                        LD      A, (BC)         ; compute volume            ' 7     |
343   0000~                        ADD     (HL)            ; mix                       ' 7     | 24
344   0000~                        JP      PO, .ok         ; check overflow            ' 10    |
345   0000~            
346   0000~                        LD      A, $7F          ; fix overflow              ' 7     |
347   0000~                        ADC     $0              ; A = $7F/$80               ' 7     | +14
348   0000~            
349   0000~            .ok
350   0000~                        LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
351   0000~                        INC     L               ; next                      ' 4     |
352   0000~            
353   0000                         endm
354   0000             
355   0000             ; readAndMix2
356   0000             ; -----------
357   0000             ; SP  <-> point to the sample source (ROM)
358   0000             ; HL  <-> point to the write output buffer
359   0000             ; BC   -> point to envelop LUT
360   0000             ; DE  <-  ?
361   0000             ; A   <-  ?
362   0000             ;
363   0000             ; read 2 samples from the ROM, apply volume
364   0000             ; and mix them in output buffer
365   0000             ; = 90 --> 118 cycles
366   0000             
367   0000                         macro readAndMix2
368   0000~            
369   0000~                        POP     DE              ; read 2 samples from ROM   ' 10+2
370   0000~            
371   0000~                        LD      C, E            ; first sample              ' 4     |
372   0000~                        doEnvAndMix             ;                           ' 35    | 78 (90)
373   0000~                        LD      C, D            ; second sample             ' 4     |
374   0000~                        doEnvAndMix             ;                           ' 35    |
375   0000~            
376   0000                         endm                    ;                           ' 90 (+14/+28)
377   0000             
378   0000             
379   0000             ; readAndMix12WhilePlay3
380   0000             ; ----------------------
381   0000             ; SP  <-> point to the sample source (ROM)
382   0000             ; HL  <-> point to the write output buffer
383   0000             ; BC   -> point to envelop LUT
384   0000             ; DE  <-  ?
385   0000             ; A   <-  ?
386   0000             ;
387   0000             ; read 12 samples from the ROM, apply volume
388   0000             ; and mix them in output buffer while playing 3 samples
389   0000             ; = 640 cycles
390   0000             
391   0000                         macro readAndMix12WhilePlay3
392   0000~            
393   0000~                        ; 1 --------------------
394   0000~            
395   0000~                        sampleOutput            ;                           ' 30
396   0000~            
397   0000~                        readAndMix2             ;                           ' 90    | 180 (210)
398   0000~                        readAndMix2             ;                           ' 90    |
399   0000~            
400   0000~                        ; 3 --------------------
401   0000~            
402   0000~                        POP     DE              ; read 2 samples from ROM   ' 10+2 (222)
403   0000~            
404   0000~                        sampleOutput            ; (1*223)-1 --> bit soon    ' 30 (252)
405   0000~            
406   0000~                        LD      C, E            ; first sample              ' 4     |
407   0000~                        doEnvAndMix             ;                           ' 35    | 78 (330)
408   0000~                        LD      C, D            ; second sample             ' 4     |
409   0000~                        doEnvAndMix             ;                           ' 35    |
410   0000~            
411   0000~                        readAndMix2             ;                           ' 90 (420)
412   0000~            
413   0000~                        ; 5 --------------------
414   0000~            
415   0000~                        POP     DE              ; read 2 samples from ROM   ' 10+2  |
416   0000~                        LD      C, E            ; first sample              ' 4     | 26 (446)
417   0000~                        wait10                  ; synchro                   ' 10    |
418   0000~            
419   0000~                        sampleOutput            ; (2*223)+0 --> perfect     ' 30 (476)
420   0000~            
421   0000~                        doEnvAndMix             ;                           ' 35    |
422   0000~                        LD      C, D            ; second sample             ' 4     | 74 (550)
423   0000~                        doEnvAndMix             ;                           ' 35    |
424   0000~            
425   0000~                        readAndMix2             ;                           ' 90 (640)
426   0000~            
427   0000                         endm                    ;                           ' 640
428   0000             
429   0000             
430   0000             ; ###########################       init       ##############################
431   0000             
432   0000                         ORG     $0000
433   0000             
434   0000             init
435   0000 F3                      DI                      ; disable ints
436   0001 31 00 0E                LD      SP, $0E00       ; setup stack
437   0004 ED 56                   IM      $01             ; set int mode 1
438   0006 AF                      XOR     A
439   0007 32 02 01                LD      (STATUS), A     ; driver not ready
440   000A 32 00 01                LD      (COMMAND), A    ; command cleared
441   000D C3 00 02                JP      start           ; jump to start
442   0010             
443   0010             
444   0010             ; ###########################     interrupt    ##############################
445   0010             
446   0010 00                      BLOCK   $0038-$
447   0038             
448   0038             interrupt                           ; do nothing in this program
449   0038 ED 4D                   RETI
450   003A             
451   003A             
452   003A             ; ###########################       main       ##############################
453   003A             
454   003A 00                      BLOCK   $0200-$
455   0200             
456   0200             start
457   0200 21 04 01                LD      HL, PARAMS
458   0203 3E 00                   LD      A, $00
459   0205 06 20                   LD      B, $20
460   0207             
461   0207             cp_loop
462   0207 77                      LD      (HL), A         ; clear sample parameters
463   0208 23                      INC     HL
464   0209 10 FC                   DJNZ    cp_loop
465   020B             
466   020B 21 00 0E                LD      HL, WAVBUFFER0
467   020E 3E 00                   LD      A, $00
468   0210 06 00                   LD      B, $00          ; for 256 * 2 bytes to clear
469   0212             
470   0212             cb_loop
471   0212 77                      LD      (HL), A         ; initialise buffers to silent
472   0213 23                      INC     HL
473   0214 77                      LD      (HL), A
474   0215 23                      INC     HL
475   0216 10 FA                   DJNZ    cb_loop
476   0218             
477   0218 CD 3F 0A                CALL    initDAC         ; prepare DAC for output
478   021B             
479   021B 21 00 0E                LD      HL, WAVBUFFER0  ; initialise write and read buffer
480   021E 22 2C 01                LD      (WRITEBUF), HL
481   0221 21 00 0F                LD      HL, WAVBUFFER1
482   0224 22 2E 01                LD      (READBUF), HL
483   0227             
484   0227 44 4D                   LD      BC, HL          ; BC' point to read buffer
485   0229 16 80                   LD      D, $80          ; D' = $80 (fast unsign)
486   022B 21 01 40                LD      HL, YMPORT1     ; HL' point to YMPORT1
487   022E D9                      EXX
488   022F             
489   022F             wait_nullwav
490   022F 2A 28 01                LD      HL, (NULLWAVADR)
491   0232 7C                      LD      A, H
492   0233 B5                      OR      L
493   0234 CA 2F 02                JP      Z, wait_nullwav ; wait for null wav address being initialised
494   0237 2A 2A 01                LD      HL, (NULLWAVLEN)
495   023A 7C                      LD      A, H
496   023B B5                      OR      L
497   023C CA 2F 02                JP      Z, wait_nullwav ; wait for null wav len being initialised
498   023F             
499   023F                         stopChannel 0           ; stop all channels
499   023F 2A 28 01    >            LD      HL, (NULLWAVADR)        ;                   ' 16
499   0242 22 14 01    >            LD      (IWAVADR+(ch*4)), HL    ;                   ' 16
499   0245 2A 2A 01    >            LD      HL, (NULLWAVLEN)        ;                   ' 16
499   0248 22 16 01    >            LD      (IWAVLEN+(ch*4)), HL    ;                   ' 16
499   024B 21 02 01    >            LD      HL, STATUS              ;                   ' 10
499   024E CB 86       >            RES     STATPLAY_SFT+ch, (HL)   ; clear status      ' 15
499   0250 21 03 01    >            LD      HL, STATUS+1            ;                   ' 10
499   0253 CB 86       >            RES     STATPLAY_SFT+ch, (HL)   ; clear status      ' 15
500   0255                         stopChannel 1
500   0255 2A 28 01    >            LD      HL, (NULLWAVADR)        ;                   ' 16
500   0258 22 18 01    >            LD      (IWAVADR+(ch*4)), HL    ;                   ' 16
500   025B 2A 2A 01    >            LD      HL, (NULLWAVLEN)        ;                   ' 16
500   025E 22 1A 01    >            LD      (IWAVLEN+(ch*4)), HL    ;                   ' 16
500   0261 21 02 01    >            LD      HL, STATUS              ;                   ' 10
500   0264 CB 8E       >            RES     STATPLAY_SFT+ch, (HL)   ; clear status      ' 15
500   0266 21 03 01    >            LD      HL, STATUS+1            ;                   ' 10
500   0269 CB 8E       >            RES     STATPLAY_SFT+ch, (HL)   ; clear status      ' 15
501   026B                         stopChannel 2
501   026B 2A 28 01    >            LD      HL, (NULLWAVADR)        ;                   ' 16
501   026E 22 1C 01    >            LD      (IWAVADR+(ch*4)), HL    ;                   ' 16
501   0271 2A 2A 01    >            LD      HL, (NULLWAVLEN)        ;                   ' 16
501   0274 22 1E 01    >            LD      (IWAVLEN+(ch*4)), HL    ;                   ' 16
501   0277 21 02 01    >            LD      HL, STATUS              ;                   ' 10
501   027A CB 96       >            RES     STATPLAY_SFT+ch, (HL)   ; clear status      ' 15
501   027C 21 03 01    >            LD      HL, STATUS+1            ;                   ' 10
501   027F CB 96       >            RES     STATPLAY_SFT+ch, (HL)   ; clear status      ' 15
502   0281                         stopChannel 3
502   0281 2A 28 01    >            LD      HL, (NULLWAVADR)        ;                   ' 16
502   0284 22 20 01    >            LD      (IWAVADR+(ch*4)), HL    ;                   ' 16
502   0287 2A 2A 01    >            LD      HL, (NULLWAVLEN)        ;                   ' 16
502   028A 22 22 01    >            LD      (IWAVLEN+(ch*4)), HL    ;                   ' 16
502   028D 21 02 01    >            LD      HL, STATUS              ;                   ' 10
502   0290 CB 9E       >            RES     STATPLAY_SFT+ch, (HL)   ; clear status      ' 15
502   0292 21 03 01    >            LD      HL, STATUS+1            ;                   ' 10
502   0295 CB 9E       >            RES     STATPLAY_SFT+ch, (HL)   ; clear status      ' 15
503   0297             
504   0297 21 24 01                LD      HL, WAVVOL      ; init all channels to max volume
505   029A 3E 0F                   LD      A, $0F
506   029C 77                      LD      (HL), A
507   029D 2C                      INC     L
508   029E 77                      LD      (HL), A
509   029F 2C                      INC     L
510   02A0 77                      LD      (HL), A
511   02A1 2C                      INC     L
512   02A2 77                      LD      (HL), A
513   02A3             
514   02A3 3E 80                   LD      A, STATREADY
515   02A5 32 02 01                LD      (STATUS), A     ; driver ready
516   02A8             
517   02A8             main_loop
518   02A8             
519   02A8             ; channel 0
520   02A8             ; ---------
521   02A8             
522   02A8             ; $00
523   02A8                         sampleOutput                ;                       ' 30    |
523   02A8 D9          >            EXX                     ;                           ' 4
523   02A9 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
523   02AA 82          >            ADD     D               ; unsign                    ' 4
523   02AB 0C          >            INC     C               ; increment with looping    ' 4
523   02AC 77          >            LD      (HL), A         ; play sample               ' 7
523   02AD D9          >            EXX                     ;                           ' 4
524   02AE                         handlePlayCommand 0         ;                       ' 146   | 223
524   02AE 21 00 01    >            LD      HL, COMMAND             ;                   ' 10
524   02B1 CB 46       >            BIT     COMPLAY_SFT+ch, (HL)    ; play command ?    ' 12
524   02B3 C2 C2 02    >            JP      NZ, .do_command     ;                       ' 10    (32)
524   02B6 3E 06       >            LD      A, w            ; 7
524   02B8 3D          >            DEC     A               ; 4
524   02B9 C2 B8 02    >            JP      NZ, .loop       ; 10
524   02BC ED 5F       >            LD      A, R
524   02BE 00          >            NOP
524   02BF C3 D8 02    >            JP      .end                ;                       ' 10    (146)
524   02C2 21 00 01    >            LD      HL, COMMAND             ;                   ' 10
524   02C5 CB 86       >            RES     COMPLAY_SFT+ch, (HL)    ; clear command     ' 15
524   02C7 2A 04 01    >            LD      HL, (WAVADR+(ch*4))     ;                   ' 16
524   02CA 22 14 01    >            LD      (IWAVADR+(ch*4)), HL    ;                   ' 16
524   02CD 2A 06 01    >            LD      HL, (WAVLEN+(ch*4))     ;                   ' 16
524   02D0 22 16 01    >            LD      (IWAVLEN+(ch*4)), HL    ;                   ' 16
524   02D3 21 02 01    >            LD      HL, STATUS              ;                   ' 10
524   02D6 CB C6       >            SET     STATPLAY_SFT+ch, (HL)   ; set status        ' 15
525   02D8                         prepareVolume 0             ;                       ' 28    |
525   02D8 21 24 01    >            LD      HL, WAVVOL+ch       ; point to volume info  ' 10
525   02DB 7E          >            LD      A, (HL)             ; A = volume            ' 7
525   02DC F6 10       >            OR      $10                 ; ajusted for LUT       ' 7
525   02DE 47          >            LD      B, A                ; save to B             ' 4
526   02DF                         wait19                      ;                       ' 19    |
526   02DF 00          >            NOP
526   02E0 00          >            NOP
526   02E1 00          >            NOP
526   02E2 F6 00       >            OR      $0
527   02E4             
528   02E4             ; $01
529   02E4                         sampleOutput                ;                       ' 30    |
529   02E4 D9          >            EXX                     ;                           ' 4
529   02E5 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
529   02E6 82          >            ADD     D               ; unsign                    ' 4
529   02E7 0C          >            INC     C               ; increment with looping    ' 4
529   02E8 77          >            LD      (HL), A         ; play sample               ' 7
529   02E9 D9          >            EXX                     ;                           ' 4
530   02EA                         prepareChannel 0            ;                       ' 182   | 223
530   02EA 21 14 01    >            LD      HL, IWAVADR+(ch*4)  ; point to sample adr   ' 10
530   02ED 7E          >            LD      A, (HL)             ; A = bit 8-15          ' 7
530   02EE 5F          >            LD      E, A                ; save to E             ' 4
530   02EF 2C          >            INC     L                   ;                       ' 4
530   02F0 17          >            RLA                         ; C flag = bit 15       ' 4
530   02F1 7E          >            LD      A, (HL)             ; A = bit 16-23         ' 7
530   02F2 17          >            RLA                         ; A = bit 15-22         ' 4     (40)
530   02F3 21 00 60    >            LD  HL, BANKREG         ; HL = BANKREG              ' 10
530   02F6 77          >            LD  (HL), A             ; #1 (bit 15)               ' 7
530   02F7 1F          >            RRA                     ;                           ' 4
530   02F8 77          >            LD  (HL), A             ; #2 (bit 16)               ' 7
530   02F9 1F          >            RRA                     ;                           ' 4
530   02FA 77          >            LD  (HL), A             ; #3 (bit 17)               ' 7
530   02FB 1F          >            RRA                     ;                           ' 4
530   02FC 77          >            LD  (HL), A             ; #4 (bit 18)               ' 7
530   02FD 1F          >            RRA                     ;                           ' 4
530   02FE 77          >            LD  (HL), A             ; #5 (bit 19)               ' 7
530   02FF 1F          >            RRA                     ;                           ' 4
530   0300 77          >            LD  (HL), A             ; #6 (bit 20)               ' 7
530   0301 1F          >            RRA                     ;                           ' 4
530   0302 77          >            LD  (HL), A             ; #7 (bit 21)               ' 7
530   0303 75          >            LD  (HL), L             ; #8 (bit 22 = 0)           ' 7
530   0304 75          >            LD  (HL), L             ; #9 (bit 23 = 0)           ' 7
530   0305 7B          >            LD      A, E                ; A = bit 8-15          ' 4
530   0306 F6 80       >            OR      $80                 ; A = $80 | bit 8-14    ' 7
530   0308 67          >            LD      H, A                ;                       ' 4
530   0309 AF          >            XOR     A                   ;                       ' 4
530   030A 6F          >            LD      L, A                ; L = $00               ' 4
530   030B F9          >            LD      SP, HL              ; SP = sample src       ' 6
530   030C 2A 2C 01    >            LD      HL, (WRITEBUF)      ;                       ' 16    (182)
531   030F DD 2E 09                LD      IXL, 9              ; prepare loop          ' 11    |
532   0312             
533   0312             ; $02-$25
534   0312             loop_ch0
535   0312                         readAndClear20WhilePlay3    ;                       ' 666   |
535   0312 D9          >            EXX                     ;                           ' 4
535   0313 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
535   0314 82          >            ADD     D               ; unsign                    ' 4
535   0315 0C          >            INC     C               ; increment with looping    ' 4
535   0316 77          >            LD      (HL), A         ; play sample               ' 7
535   0317 D9          >            EXX                     ;                           ' 4
535   0318 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2
535   0319 4B          >            LD      C, E            ; first sample              ' 4
535   031A 0A          >            LD      A, (BC)         ; compute volume            ' 7
535   031B 77          >            LD      (HL), A         ; write in output buffer    ' 7
535   031C 2C          >            INC     L               ; next                      ' 4
535   031D 4A          >            LD      C, D            ; second sample             ' 4
535   031E 0A          >            LD      A, (BC)         ; compute volume            ' 7
535   031F 77          >            LD      (HL), A         ; write in output buffer    ' 7
535   0320 2C          >            INC     L               ; next                      ' 4
535   0321 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2
535   0322 4B          >            LD      C, E            ; first sample              ' 4
535   0323 0A          >            LD      A, (BC)         ; compute volume            ' 7
535   0324 77          >            LD      (HL), A         ; write in output buffer    ' 7
535   0325 2C          >            INC     L               ; next                      ' 4
535   0326 4A          >            LD      C, D            ; second sample             ' 4
535   0327 0A          >            LD      A, (BC)         ; compute volume            ' 7
535   0328 77          >            LD      (HL), A         ; write in output buffer    ' 7
535   0329 2C          >            INC     L               ; next                      ' 4
535   032A D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2
535   032B 4B          >            LD      C, E            ; first sample              ' 4
535   032C 0A          >            LD      A, (BC)         ; compute volume            ' 7
535   032D 77          >            LD      (HL), A         ; write in output buffer    ' 7
535   032E 2C          >            INC     L               ; next                      ' 4
535   032F 4A          >            LD      C, D            ; second sample             ' 4
535   0330 0A          >            LD      A, (BC)         ; compute volume            ' 7
535   0331 77          >            LD      (HL), A         ; write in output buffer    ' 7
535   0332 2C          >            INC     L               ; next                      ' 4
535   0333 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2  |
535   0334 4B          >            LD      C, E            ; first sample              ' 4     | 25 (223)
535   0335 ED 5F       >            LD      A, R
535   0337 D9          >            EXX                     ;                           ' 4
535   0338 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
535   0339 82          >            ADD     D               ; unsign                    ' 4
535   033A 0C          >            INC     C               ; increment with looping    ' 4
535   033B 77          >            LD      (HL), A         ; play sample               ' 7
535   033C D9          >            EXX                     ;                           ' 4
535   033D 0A          >            LD      A, (BC)         ; compute volume            ' 7
535   033E 77          >            LD      (HL), A         ; write in output buffer    ' 7
535   033F 2C          >            INC     L               ; next                      ' 4
535   0340 4A          >            LD      C, D            ; second sample             ' 4     | 40 (293)
535   0341 0A          >            LD      A, (BC)         ; compute volume            ' 7
535   0342 77          >            LD      (HL), A         ; write in output buffer    ' 7
535   0343 2C          >            INC     L               ; next                      ' 4
535   0344 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2
535   0345 4B          >            LD      C, E            ; first sample              ' 4
535   0346 0A          >            LD      A, (BC)         ; compute volume            ' 7
535   0347 77          >            LD      (HL), A         ; write in output buffer    ' 7
535   0348 2C          >            INC     L               ; next                      ' 4
535   0349 4A          >            LD      C, D            ; second sample             ' 4
535   034A 0A          >            LD      A, (BC)         ; compute volume            ' 7
535   034B 77          >            LD      (HL), A         ; write in output buffer    ' 7
535   034C 2C          >            INC     L               ; next                      ' 4
535   034D D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2
535   034E 4B          >            LD      C, E            ; first sample              ' 4
535   034F 0A          >            LD      A, (BC)         ; compute volume            ' 7
535   0350 77          >            LD      (HL), A         ; write in output buffer    ' 7
535   0351 2C          >            INC     L               ; next                      ' 4
535   0352 4A          >            LD      C, D            ; second sample             ' 4
535   0353 0A          >            LD      A, (BC)         ; compute volume            ' 7
535   0354 77          >            LD      (HL), A         ; write in output buffer    ' 7
535   0355 2C          >            INC     L               ; next                      ' 4
535   0356 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2  |
535   0357 4B          >            LD      C, E            ; first sample              ' 4     | 34 (446)
535   0358 0A          >            LD      A, (BC)         ; compute volume            ' 7
535   0359 77          >            LD      (HL), A         ; write in output buffer    ' 7
535   035A 2C          >            INC     L               ; next                      ' 4
535   035B F6 00       >            OR      $0
535   035D D9          >            EXX                     ;                           ' 4
535   035E 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
535   035F 82          >            ADD     D               ; unsign                    ' 4
535   0360 0C          >            INC     C               ; increment with looping    ' 4
535   0361 77          >            LD      (HL), A         ; play sample               ' 7
535   0362 D9          >            EXX                     ;                           ' 4
535   0363 4A          >            LD      C, D            ; second sample             ' 4     | 22 (498)
535   0364 0A          >            LD      A, (BC)         ; compute volume            ' 7
535   0365 77          >            LD      (HL), A         ; write in output buffer    ' 7
535   0366 2C          >            INC     L               ; next                      ' 4
535   0367 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2
535   0368 4B          >            LD      C, E            ; first sample              ' 4
535   0369 0A          >            LD      A, (BC)         ; compute volume            ' 7
535   036A 77          >            LD      (HL), A         ; write in output buffer    ' 7
535   036B 2C          >            INC     L               ; next                      ' 4
535   036C 4A          >            LD      C, D            ; second sample             ' 4
535   036D 0A          >            LD      A, (BC)         ; compute volume            ' 7
535   036E 77          >            LD      (HL), A         ; write in output buffer    ' 7
535   036F 2C          >            INC     L               ; next                      ' 4
535   0370 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2
535   0371 4B          >            LD      C, E            ; first sample              ' 4
535   0372 0A          >            LD      A, (BC)         ; compute volume            ' 7
535   0373 77          >            LD      (HL), A         ; write in output buffer    ' 7
535   0374 2C          >            INC     L               ; next                      ' 4
535   0375 4A          >            LD      C, D            ; second sample             ' 4
535   0376 0A          >            LD      A, (BC)         ; compute volume            ' 7
535   0377 77          >            LD      (HL), A         ; write in output buffer    ' 7
535   0378 2C          >            INC     L               ; next                      ' 4
535   0379 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2
535   037A 4B          >            LD      C, E            ; first sample              ' 4
535   037B 0A          >            LD      A, (BC)         ; compute volume            ' 7
535   037C 77          >            LD      (HL), A         ; write in output buffer    ' 7
535   037D 2C          >            INC     L               ; next                      ' 4
535   037E 4A          >            LD      C, D            ; second sample             ' 4
535   037F 0A          >            LD      A, (BC)         ; compute volume            ' 7
535   0380 77          >            LD      (HL), A         ; write in output buffer    ' 7
535   0381 2C          >            INC     L               ; next                      ' 4
536   0382                         wait4                       ;                       ' 4     |
536   0382 00          >            NOP
537   0383                         sampleOutput                ;                       ' 30    |
537   0383 D9          >            EXX                     ;                           ' 4
537   0384 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
537   0385 82          >            ADD     D               ; unsign                    ' 4
537   0386 0C          >            INC     C               ; increment with looping    ' 4
537   0387 77          >            LD      (HL), A         ; play sample               ' 7
537   0388 D9          >            EXX                     ;                           ' 4
538   0389                         readAndClear2               ; 26 samples per loop   ' 56    |
538   0389 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2
538   038A 4B          >            LD      C, E            ; first sample              ' 4
538   038B 0A          >            LD      A, (BC)         ; compute volume            ' 7
538   038C 77          >            LD      (HL), A         ; write in output buffer    ' 7
538   038D 2C          >            INC     L               ; next                      ' 4
538   038E 4A          >            LD      C, D            ; second sample             ' 4
538   038F 0A          >            LD      A, (BC)         ; compute volume            ' 7
538   0390 77          >            LD      (HL), A         ; write in output buffer    ' 7
538   0391 2C          >            INC     L               ; next                      ' 4
539   0392                         readAndClear2               ;                       ' 56    | 4*223
539   0392 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2
539   0393 4B          >            LD      C, E            ; first sample              ' 4
539   0394 0A          >            LD      A, (BC)         ; compute volume            ' 7
539   0395 77          >            LD      (HL), A         ; write in output buffer    ' 7
539   0396 2C          >            INC     L               ; next                      ' 4
539   0397 4A          >            LD      C, D            ; second sample             ' 4
539   0398 0A          >            LD      A, (BC)         ; compute volume            ' 7
539   0399 77          >            LD      (HL), A         ; write in output buffer    ' 7
539   039A 2C          >            INC     L               ; next                      ' 4
540   039B                         readAndClear2               ;                       ' 56    |
540   039B D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2
540   039C 4B          >            LD      C, E            ; first sample              ' 4
540   039D 0A          >            LD      A, (BC)         ; compute volume            ' 7
540   039E 77          >            LD      (HL), A         ; write in output buffer    ' 7
540   039F 2C          >            INC     L               ; next                      ' 4
540   03A0 4A          >            LD      C, D            ; second sample             ' 4
540   03A1 0A          >            LD      A, (BC)         ; compute volume            ' 7
540   03A2 77          >            LD      (HL), A         ; write in output buffer    ' 7
540   03A3 2C          >            INC     L               ; next                      ' 4
541   03A4                         wait6                       ; DE modified here      ' 6     |
541   03A4 13          >            INC     DE
542   03A5 DD 2D                   DEC     IXL                 ;                       ' 8     |
543   03A7 C2 12 03                JP      NZ, loop_ch0        ;                       ' 10    |
544   03AA             
545   03AA             ; $26-$29
546   03AA                         readAndClear20WhilePlay3    ;                       ' 666   |
546   03AA D9          >            EXX                     ;                           ' 4
546   03AB 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
546   03AC 82          >            ADD     D               ; unsign                    ' 4
546   03AD 0C          >            INC     C               ; increment with looping    ' 4
546   03AE 77          >            LD      (HL), A         ; play sample               ' 7
546   03AF D9          >            EXX                     ;                           ' 4
546   03B0 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2
546   03B1 4B          >            LD      C, E            ; first sample              ' 4
546   03B2 0A          >            LD      A, (BC)         ; compute volume            ' 7
546   03B3 77          >            LD      (HL), A         ; write in output buffer    ' 7
546   03B4 2C          >            INC     L               ; next                      ' 4
546   03B5 4A          >            LD      C, D            ; second sample             ' 4
546   03B6 0A          >            LD      A, (BC)         ; compute volume            ' 7
546   03B7 77          >            LD      (HL), A         ; write in output buffer    ' 7
546   03B8 2C          >            INC     L               ; next                      ' 4
546   03B9 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2
546   03BA 4B          >            LD      C, E            ; first sample              ' 4
546   03BB 0A          >            LD      A, (BC)         ; compute volume            ' 7
546   03BC 77          >            LD      (HL), A         ; write in output buffer    ' 7
546   03BD 2C          >            INC     L               ; next                      ' 4
546   03BE 4A          >            LD      C, D            ; second sample             ' 4
546   03BF 0A          >            LD      A, (BC)         ; compute volume            ' 7
546   03C0 77          >            LD      (HL), A         ; write in output buffer    ' 7
546   03C1 2C          >            INC     L               ; next                      ' 4
546   03C2 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2
546   03C3 4B          >            LD      C, E            ; first sample              ' 4
546   03C4 0A          >            LD      A, (BC)         ; compute volume            ' 7
546   03C5 77          >            LD      (HL), A         ; write in output buffer    ' 7
546   03C6 2C          >            INC     L               ; next                      ' 4
546   03C7 4A          >            LD      C, D            ; second sample             ' 4
546   03C8 0A          >            LD      A, (BC)         ; compute volume            ' 7
546   03C9 77          >            LD      (HL), A         ; write in output buffer    ' 7
546   03CA 2C          >            INC     L               ; next                      ' 4
546   03CB D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2  |
546   03CC 4B          >            LD      C, E            ; first sample              ' 4     | 25 (223)
546   03CD ED 5F       >            LD      A, R
546   03CF D9          >            EXX                     ;                           ' 4
546   03D0 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
546   03D1 82          >            ADD     D               ; unsign                    ' 4
546   03D2 0C          >            INC     C               ; increment with looping    ' 4
546   03D3 77          >            LD      (HL), A         ; play sample               ' 7
546   03D4 D9          >            EXX                     ;                           ' 4
546   03D5 0A          >            LD      A, (BC)         ; compute volume            ' 7
546   03D6 77          >            LD      (HL), A         ; write in output buffer    ' 7
546   03D7 2C          >            INC     L               ; next                      ' 4
546   03D8 4A          >            LD      C, D            ; second sample             ' 4     | 40 (293)
546   03D9 0A          >            LD      A, (BC)         ; compute volume            ' 7
546   03DA 77          >            LD      (HL), A         ; write in output buffer    ' 7
546   03DB 2C          >            INC     L               ; next                      ' 4
546   03DC D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2
546   03DD 4B          >            LD      C, E            ; first sample              ' 4
546   03DE 0A          >            LD      A, (BC)         ; compute volume            ' 7
546   03DF 77          >            LD      (HL), A         ; write in output buffer    ' 7
546   03E0 2C          >            INC     L               ; next                      ' 4
546   03E1 4A          >            LD      C, D            ; second sample             ' 4
546   03E2 0A          >            LD      A, (BC)         ; compute volume            ' 7
546   03E3 77          >            LD      (HL), A         ; write in output buffer    ' 7
546   03E4 2C          >            INC     L               ; next                      ' 4
546   03E5 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2
546   03E6 4B          >            LD      C, E            ; first sample              ' 4
546   03E7 0A          >            LD      A, (BC)         ; compute volume            ' 7
546   03E8 77          >            LD      (HL), A         ; write in output buffer    ' 7
546   03E9 2C          >            INC     L               ; next                      ' 4
546   03EA 4A          >            LD      C, D            ; second sample             ' 4
546   03EB 0A          >            LD      A, (BC)         ; compute volume            ' 7
546   03EC 77          >            LD      (HL), A         ; write in output buffer    ' 7
546   03ED 2C          >            INC     L               ; next                      ' 4
546   03EE D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2  |
546   03EF 4B          >            LD      C, E            ; first sample              ' 4     | 34 (446)
546   03F0 0A          >            LD      A, (BC)         ; compute volume            ' 7
546   03F1 77          >            LD      (HL), A         ; write in output buffer    ' 7
546   03F2 2C          >            INC     L               ; next                      ' 4
546   03F3 F6 00       >            OR      $0
546   03F5 D9          >            EXX                     ;                           ' 4
546   03F6 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
546   03F7 82          >            ADD     D               ; unsign                    ' 4
546   03F8 0C          >            INC     C               ; increment with looping    ' 4
546   03F9 77          >            LD      (HL), A         ; play sample               ' 7
546   03FA D9          >            EXX                     ;                           ' 4
546   03FB 4A          >            LD      C, D            ; second sample             ' 4     | 22 (498)
546   03FC 0A          >            LD      A, (BC)         ; compute volume            ' 7
546   03FD 77          >            LD      (HL), A         ; write in output buffer    ' 7
546   03FE 2C          >            INC     L               ; next                      ' 4
546   03FF D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2
546   0400 4B          >            LD      C, E            ; first sample              ' 4
546   0401 0A          >            LD      A, (BC)         ; compute volume            ' 7
546   0402 77          >            LD      (HL), A         ; write in output buffer    ' 7
546   0403 2C          >            INC     L               ; next                      ' 4
546   0404 4A          >            LD      C, D            ; second sample             ' 4
546   0405 0A          >            LD      A, (BC)         ; compute volume            ' 7
546   0406 77          >            LD      (HL), A         ; write in output buffer    ' 7
546   0407 2C          >            INC     L               ; next                      ' 4
546   0408 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2
546   0409 4B          >            LD      C, E            ; first sample              ' 4
546   040A 0A          >            LD      A, (BC)         ; compute volume            ' 7
546   040B 77          >            LD      (HL), A         ; write in output buffer    ' 7
546   040C 2C          >            INC     L               ; next                      ' 4
546   040D 4A          >            LD      C, D            ; second sample             ' 4
546   040E 0A          >            LD      A, (BC)         ; compute volume            ' 7
546   040F 77          >            LD      (HL), A         ; write in output buffer    ' 7
546   0410 2C          >            INC     L               ; next                      ' 4
546   0411 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2
546   0412 4B          >            LD      C, E            ; first sample              ' 4
546   0413 0A          >            LD      A, (BC)         ; compute volume            ' 7
546   0414 77          >            LD      (HL), A         ; write in output buffer    ' 7
546   0415 2C          >            INC     L               ; next                      ' 4
546   0416 4A          >            LD      C, D            ; second sample             ' 4
546   0417 0A          >            LD      A, (BC)         ; compute volume            ' 7
546   0418 77          >            LD      (HL), A         ; write in output buffer    ' 7
546   0419 2C          >            INC     L               ; next                      ' 4
547   041A                         wait4                       ;                       ' 4     |
547   041A 00          >            NOP
548   041B                         sampleOutput                ;                       ' 30    | 4*223
548   041B D9          >            EXX                     ;                           ' 4
548   041C 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
548   041D 82          >            ADD     D               ; unsign                    ' 4
548   041E 0C          >            INC     C               ; increment with looping    ' 4
548   041F 77          >            LD      (HL), A         ; play sample               ' 7
548   0420 D9          >            EXX                     ;                           ' 4
549   0421                         readAndClear2               ; process 22 samples    ' 56    |
549   0421 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2
549   0422 4B          >            LD      C, E            ; first sample              ' 4
549   0423 0A          >            LD      A, (BC)         ; compute volume            ' 7
549   0424 77          >            LD      (HL), A         ; write in output buffer    ' 7
549   0425 2C          >            INC     L               ; next                      ' 4
549   0426 4A          >            LD      C, D            ; second sample             ' 4
549   0427 0A          >            LD      A, (BC)         ; compute volume            ' 7
549   0428 77          >            LD      (HL), A         ; write in output buffer    ' 7
549   0429 2C          >            INC     L               ; next                      ' 4
550   042A                         updateChannelData 0         ; update channel data   ' 76    |
550   042A 2A 14 01    >            LD      HL, (IWAVADR+(ch*4))    ; increment address ' 16
550   042D 23          >            INC     HL                      ;                   ' 6
550   042E 22 14 01    >            LD      (IWAVADR+(ch*4)), HL    ;                   ' 16    (38)
550   0431 2A 16 01    >            LD      HL, (IWAVLEN+(ch*4))    ; decrement lenght  ' 16
550   0434 2B          >            DEC     HL                      ;                   ' 6
550   0435 22 16 01    >            LD      (IWAVLEN+(ch*4)), HL    ;                   ' 16    (76)
551   0438                         wait60                      ;                       ' 60    |
551   0438 3E 03       >            LD      A, w            ; 7
551   043A 3D          >            DEC     A               ; 4
551   043B C2 3A 04    >            JP      NZ, .loop       ; 10
551   043E F6 00       >            OR      $0
551   0440 00          >            NOP
552   0441             
553   0441             ; $2A
554   0441                         sampleOutput                ;                       ' 30    |
554   0441 D9          >            EXX                     ;                           ' 4
554   0442 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
554   0443 82          >            ADD     D               ; unsign                    ' 4
554   0444 0C          >            INC     C               ; increment with looping    ' 4
554   0445 77          >            LD      (HL), A         ; play sample               ' 7
554   0446 D9          >            EXX                     ;                           ' 4
555   0447                         checkChannelEnd 0           ;                       ' 180   | 223
555   0447 2A 16 01    >            LD      HL, (IWAVLEN+(ch*4))    ; get sample lenght ' 16
555   044A 7C          >            LD      A, H                    ;                   ' 4
555   044B B5          >            OR      L                       ;                   ' 4
555   044C CA 5C 04    >            JP      Z, .done                ; sample done ?     ' 10    (34)
555   044F 3E 08       >            LD      A, w            ; 7
555   0451 3D          >            DEC     A               ; 4
555   0452 C2 51 04    >            JP      NZ, .loop       ; 10
555   0455 FD 23       >            INC     IY
555   0457 F6 00       >            OR      $0
555   0459 C3 94 04    >            JP      .end                    ;                   ' 10    (180)
555   045C 21 03 01    >            LD      HL, STATUS+1            ;                   ' 10
555   045F CB 46       >            BIT     STATPLAY_SFT+ch, (HL)   ; get status        ' 12
555   0461 CA 7E 04    >            JP      Z, .stop            ;                       ' 10    (66)
555   0464 2A 04 01    >            LD      HL, (WAVADR+(ch*4))     ;                   ' 16
555   0467 22 14 01    >            LD      (IWAVADR+(ch*4)), HL    ;                   ' 16
555   046A 2A 06 01    >            LD      HL, (WAVLEN+(ch*4))     ;                   ' 16
555   046D 22 16 01    >            LD      (IWAVLEN+(ch*4)), HL    ;                   ' 16
555   0470 3E 01       >            LD      A, w            ; 7
555   0472 3D          >            DEC     A               ; 4
555   0473 C2 72 04    >            JP      NZ, .loop       ; 10
555   0476 00          >            NOP
555   0477 00          >            NOP
555   0478 00          >            NOP
555   0479 F6 00       >            OR      $0
555   047B C3 94 04    >            JP      .end                ;                       ' 10    (180)
555   047E 2A 28 01    >            LD      HL, (NULLWAVADR)        ;                   ' 16
555   0481 22 14 01    >            LD      (IWAVADR+(ch*4)), HL    ;                   ' 16
555   0484 2A 2A 01    >            LD      HL, (NULLWAVLEN)        ;                   ' 16
555   0487 22 16 01    >            LD      (IWAVLEN+(ch*4)), HL    ;                   ' 16
555   048A 21 02 01    >            LD      HL, STATUS              ;                   ' 10
555   048D CB 86       >            RES     STATPLAY_SFT+ch, (HL)   ; clear status      ' 15
555   048F 21 03 01    >            LD      HL, STATUS+1            ;                   ' 10
555   0492 CB 86       >            RES     STATPLAY_SFT+ch, (HL)   ; clear status      ' 15
556   0494                         wait13                      ;                       ' 13    |
556   0494 ED 5F       >            LD      A, R
556   0496 00          >            NOP
557   0497             
558   0497             ; channel 1
559   0497             ; ---------
560   0497             
561   0497             ; $2B
562   0497                         sampleOutput                ;                       ' 30    |
562   0497 D9          >            EXX                     ;                           ' 4
562   0498 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
562   0499 82          >            ADD     D               ; unsign                    ' 4
562   049A 0C          >            INC     C               ; increment with looping    ' 4
562   049B 77          >            LD      (HL), A         ; play sample               ' 7
562   049C D9          >            EXX                     ;                           ' 4
563   049D                         handlePlayCommand 1         ;                       ' 146   | 223
563   049D 21 00 01    >            LD      HL, COMMAND             ;                   ' 10
563   04A0 CB 4E       >            BIT     COMPLAY_SFT+ch, (HL)    ; play command ?    ' 12
563   04A2 C2 B1 04    >            JP      NZ, .do_command     ;                       ' 10    (32)
563   04A5 3E 06       >            LD      A, w            ; 7
563   04A7 3D          >            DEC     A               ; 4
563   04A8 C2 A7 04    >            JP      NZ, .loop       ; 10
563   04AB ED 5F       >            LD      A, R
563   04AD 00          >            NOP
563   04AE C3 C7 04    >            JP      .end                ;                       ' 10    (146)
563   04B1 21 00 01    >            LD      HL, COMMAND             ;                   ' 10
563   04B4 CB 8E       >            RES     COMPLAY_SFT+ch, (HL)    ; clear command     ' 15
563   04B6 2A 08 01    >            LD      HL, (WAVADR+(ch*4))     ;                   ' 16
563   04B9 22 18 01    >            LD      (IWAVADR+(ch*4)), HL    ;                   ' 16
563   04BC 2A 0A 01    >            LD      HL, (WAVLEN+(ch*4))     ;                   ' 16
563   04BF 22 1A 01    >            LD      (IWAVLEN+(ch*4)), HL    ;                   ' 16
563   04C2 21 02 01    >            LD      HL, STATUS              ;                   ' 10
563   04C5 CB CE       >            SET     STATPLAY_SFT+ch, (HL)   ; set status        ' 15
564   04C7                         prepareVolume 1             ;                       ' 28    |
564   04C7 21 25 01    >            LD      HL, WAVVOL+ch       ; point to volume info  ' 10
564   04CA 7E          >            LD      A, (HL)             ; A = volume            ' 7
564   04CB F6 10       >            OR      $10                 ; ajusted for LUT       ' 7
564   04CD 47          >            LD      B, A                ; save to B             ' 4
565   04CE                         wait19                      ;                       ' 19    |
565   04CE 00          >            NOP
565   04CF 00          >            NOP
565   04D0 00          >            NOP
565   04D1 F6 00       >            OR      $0
566   04D3             
567   04D3             ; $2C
568   04D3                         sampleOutput                ;                       ' 30    |
568   04D3 D9          >            EXX                     ;                           ' 4
568   04D4 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
568   04D5 82          >            ADD     D               ; unsign                    ' 4
568   04D6 0C          >            INC     C               ; increment with looping    ' 4
568   04D7 77          >            LD      (HL), A         ; play sample               ' 7
568   04D8 D9          >            EXX                     ;                           ' 4
569   04D9                         prepareChannel 1            ;                       ' 182   | 223
569   04D9 21 18 01    >            LD      HL, IWAVADR+(ch*4)  ; point to sample adr   ' 10
569   04DC 7E          >            LD      A, (HL)             ; A = bit 8-15          ' 7
569   04DD 5F          >            LD      E, A                ; save to E             ' 4
569   04DE 2C          >            INC     L                   ;                       ' 4
569   04DF 17          >            RLA                         ; C flag = bit 15       ' 4
569   04E0 7E          >            LD      A, (HL)             ; A = bit 16-23         ' 7
569   04E1 17          >            RLA                         ; A = bit 15-22         ' 4     (40)
569   04E2 21 00 60    >            LD  HL, BANKREG         ; HL = BANKREG              ' 10
569   04E5 77          >            LD  (HL), A             ; #1 (bit 15)               ' 7
569   04E6 1F          >            RRA                     ;                           ' 4
569   04E7 77          >            LD  (HL), A             ; #2 (bit 16)               ' 7
569   04E8 1F          >            RRA                     ;                           ' 4
569   04E9 77          >            LD  (HL), A             ; #3 (bit 17)               ' 7
569   04EA 1F          >            RRA                     ;                           ' 4
569   04EB 77          >            LD  (HL), A             ; #4 (bit 18)               ' 7
569   04EC 1F          >            RRA                     ;                           ' 4
569   04ED 77          >            LD  (HL), A             ; #5 (bit 19)               ' 7
569   04EE 1F          >            RRA                     ;                           ' 4
569   04EF 77          >            LD  (HL), A             ; #6 (bit 20)               ' 7
569   04F0 1F          >            RRA                     ;                           ' 4
569   04F1 77          >            LD  (HL), A             ; #7 (bit 21)               ' 7
569   04F2 75          >            LD  (HL), L             ; #8 (bit 22 = 0)           ' 7
569   04F3 75          >            LD  (HL), L             ; #9 (bit 23 = 0)           ' 7
569   04F4 7B          >            LD      A, E                ; A = bit 8-15          ' 4
569   04F5 F6 80       >            OR      $80                 ; A = $80 | bit 8-14    ' 7
569   04F7 67          >            LD      H, A                ;                       ' 4
569   04F8 AF          >            XOR     A                   ;                       ' 4
569   04F9 6F          >            LD      L, A                ; L = $00               ' 4
569   04FA F9          >            LD      SP, HL              ; SP = sample src       ' 6
569   04FB 2A 2C 01    >            LD      HL, (WRITEBUF)      ;                       ' 16    (182)
570   04FE DD 2E 15                LD      IXL, 21             ; prepare loop          ' 11    |
571   0501             
572   0501             ; $2D-$6B
573   0501             loop_ch1
574   0501                         readAndMix12WhilePlay3      ;                       ' 640   |
574   0501 D9          >            EXX                     ;                           ' 4
574   0502 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
574   0503 82          >            ADD     D               ; unsign                    ' 4
574   0504 0C          >            INC     C               ; increment with looping    ' 4
574   0505 77          >            LD      (HL), A         ; play sample               ' 7
574   0506 D9          >            EXX                     ;                           ' 4
574   0507 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2
574   0508 4B          >            LD      C, E            ; first sample              ' 4     |
574   0509 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
574   050A 86          >            ADD     (HL)            ; mix                       ' 7     | 24
574   050B E2 12 05    >            JP      PO, .ok         ; check overflow            ' 10    |
574   050E 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
574   0510 CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
574   0512 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
574   0513 2C          >            INC     L               ; next                      ' 4     |
574   0514 4A          >            LD      C, D            ; second sample             ' 4     |
574   0515 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
574   0516 86          >            ADD     (HL)            ; mix                       ' 7     | 24
574   0517 E2 1E 05    >            JP      PO, .ok         ; check overflow            ' 10    |
574   051A 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
574   051C CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
574   051E 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
574   051F 2C          >            INC     L               ; next                      ' 4     |
574   0520 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2
574   0521 4B          >            LD      C, E            ; first sample              ' 4     |
574   0522 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
574   0523 86          >            ADD     (HL)            ; mix                       ' 7     | 24
574   0524 E2 2B 05    >            JP      PO, .ok         ; check overflow            ' 10    |
574   0527 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
574   0529 CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
574   052B 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
574   052C 2C          >            INC     L               ; next                      ' 4     |
574   052D 4A          >            LD      C, D            ; second sample             ' 4     |
574   052E 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
574   052F 86          >            ADD     (HL)            ; mix                       ' 7     | 24
574   0530 E2 37 05    >            JP      PO, .ok         ; check overflow            ' 10    |
574   0533 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
574   0535 CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
574   0537 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
574   0538 2C          >            INC     L               ; next                      ' 4     |
574   0539 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2 (222)
574   053A D9          >            EXX                     ;                           ' 4
574   053B 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
574   053C 82          >            ADD     D               ; unsign                    ' 4
574   053D 0C          >            INC     C               ; increment with looping    ' 4
574   053E 77          >            LD      (HL), A         ; play sample               ' 7
574   053F D9          >            EXX                     ;                           ' 4
574   0540 4B          >            LD      C, E            ; first sample              ' 4     |
574   0541 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
574   0542 86          >            ADD     (HL)            ; mix                       ' 7     | 24
574   0543 E2 4A 05    >            JP      PO, .ok         ; check overflow            ' 10    |
574   0546 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
574   0548 CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
574   054A 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
574   054B 2C          >            INC     L               ; next                      ' 4     |
574   054C 4A          >            LD      C, D            ; second sample             ' 4     |
574   054D 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
574   054E 86          >            ADD     (HL)            ; mix                       ' 7     | 24
574   054F E2 56 05    >            JP      PO, .ok         ; check overflow            ' 10    |
574   0552 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
574   0554 CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
574   0556 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
574   0557 2C          >            INC     L               ; next                      ' 4     |
574   0558 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2
574   0559 4B          >            LD      C, E            ; first sample              ' 4     |
574   055A 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
574   055B 86          >            ADD     (HL)            ; mix                       ' 7     | 24
574   055C E2 63 05    >            JP      PO, .ok         ; check overflow            ' 10    |
574   055F 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
574   0561 CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
574   0563 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
574   0564 2C          >            INC     L               ; next                      ' 4     |
574   0565 4A          >            LD      C, D            ; second sample             ' 4     |
574   0566 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
574   0567 86          >            ADD     (HL)            ; mix                       ' 7     | 24
574   0568 E2 6F 05    >            JP      PO, .ok         ; check overflow            ' 10    |
574   056B 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
574   056D CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
574   056F 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
574   0570 2C          >            INC     L               ; next                      ' 4     |
574   0571 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2  |
574   0572 4B          >            LD      C, E            ; first sample              ' 4     | 26 (446)
574   0573 FD 23       >            INC     IY
574   0575 D9          >            EXX                     ;                           ' 4
574   0576 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
574   0577 82          >            ADD     D               ; unsign                    ' 4
574   0578 0C          >            INC     C               ; increment with looping    ' 4
574   0579 77          >            LD      (HL), A         ; play sample               ' 7
574   057A D9          >            EXX                     ;                           ' 4
574   057B 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
574   057C 86          >            ADD     (HL)            ; mix                       ' 7     | 24
574   057D E2 84 05    >            JP      PO, .ok         ; check overflow            ' 10    |
574   0580 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
574   0582 CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
574   0584 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
574   0585 2C          >            INC     L               ; next                      ' 4     |
574   0586 4A          >            LD      C, D            ; second sample             ' 4     | 74 (550)
574   0587 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
574   0588 86          >            ADD     (HL)            ; mix                       ' 7     | 24
574   0589 E2 90 05    >            JP      PO, .ok         ; check overflow            ' 10    |
574   058C 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
574   058E CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
574   0590 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
574   0591 2C          >            INC     L               ; next                      ' 4     |
574   0592 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2
574   0593 4B          >            LD      C, E            ; first sample              ' 4     |
574   0594 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
574   0595 86          >            ADD     (HL)            ; mix                       ' 7     | 24
574   0596 E2 9D 05    >            JP      PO, .ok         ; check overflow            ' 10    |
574   0599 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
574   059B CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
574   059D 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
574   059E 2C          >            INC     L               ; next                      ' 4     |
574   059F 4A          >            LD      C, D            ; second sample             ' 4     |
574   05A0 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
574   05A1 86          >            ADD     (HL)            ; mix                       ' 7     | 24
574   05A2 E2 A9 05    >            JP      PO, .ok         ; check overflow            ' 10    |
574   05A5 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
574   05A7 CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
574   05A9 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
574   05AA 2C          >            INC     L               ; next                      ' 4     |
575   05AB                         wait11                      ;                       ' 11    | 3*223
575   05AB F6 00       >            OR      $0
575   05AD 00          >            NOP
576   05AE DD 2D                   DEC     IXL                 ; 12 samples per loop   ' 8     |
577   05B0 C2 01 05                JP      NZ, loop_ch1        ;                       ' 10    |
578   05B3             
579   05B3             ; $6C
580   05B3                         sampleOutput                ;                       ' 30    |
580   05B3 D9          >            EXX                     ;                           ' 4
580   05B4 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
580   05B5 82          >            ADD     D               ; unsign                    ' 4
580   05B6 0C          >            INC     C               ; increment with looping    ' 4
580   05B7 77          >            LD      (HL), A         ; play sample               ' 7
580   05B8 D9          >            EXX                     ;                           ' 4
581   05B9                         readAndMix2                 ;                       ' 90    | 223
581   05B9 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2
581   05BA 4B          >            LD      C, E            ; first sample              ' 4     |
581   05BB 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
581   05BC 86          >            ADD     (HL)            ; mix                       ' 7     | 24
581   05BD E2 C4 05    >            JP      PO, .ok         ; check overflow            ' 10    |
581   05C0 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
581   05C2 CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
581   05C4 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
581   05C5 2C          >            INC     L               ; next                      ' 4     |
581   05C6 4A          >            LD      C, D            ; second sample             ' 4     |
581   05C7 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
581   05C8 86          >            ADD     (HL)            ; mix                       ' 7     | 24
581   05C9 E2 D0 05    >            JP      PO, .ok         ; check overflow            ' 10    |
581   05CC 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
581   05CE CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
581   05D0 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
581   05D1 2C          >            INC     L               ; next                      ' 4     |
582   05D2                         readAndMix2                 ; last 4 samples        ' 90    |
582   05D2 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2
582   05D3 4B          >            LD      C, E            ; first sample              ' 4     |
582   05D4 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
582   05D5 86          >            ADD     (HL)            ; mix                       ' 7     | 24
582   05D6 E2 DD 05    >            JP      PO, .ok         ; check overflow            ' 10    |
582   05D9 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
582   05DB CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
582   05DD 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
582   05DE 2C          >            INC     L               ; next                      ' 4     |
582   05DF 4A          >            LD      C, D            ; second sample             ' 4     |
582   05E0 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
582   05E1 86          >            ADD     (HL)            ; mix                       ' 7     | 24
582   05E2 E2 E9 05    >            JP      PO, .ok         ; check overflow            ' 10    |
582   05E5 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
582   05E7 CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
582   05E9 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
582   05EA 2C          >            INC     L               ; next                      ' 4     |
583   05EB                         wait13                      ;                       ' 13    |
583   05EB ED 5F       >            LD      A, R
583   05ED 00          >            NOP
584   05EE             
585   05EE             ; $6D
586   05EE                         sampleOutput                ;                       ' 30    |
586   05EE D9          >            EXX                     ;                           ' 4
586   05EF 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
586   05F0 82          >            ADD     D               ; unsign                    ' 4
586   05F1 0C          >            INC     C               ; increment with looping    ' 4
586   05F2 77          >            LD      (HL), A         ; play sample               ' 7
586   05F3 D9          >            EXX                     ;                           ' 4
587   05F4                         updateChannelData 1         ;                       ' 76    | 223
587   05F4 2A 18 01    >            LD      HL, (IWAVADR+(ch*4))    ; increment address ' 16
587   05F7 23          >            INC     HL                      ;                   ' 6
587   05F8 22 18 01    >            LD      (IWAVADR+(ch*4)), HL    ;                   ' 16    (38)
587   05FB 2A 1A 01    >            LD      HL, (IWAVLEN+(ch*4))    ; decrement lenght  ' 16
587   05FE 2B          >            DEC     HL                      ;                   ' 6
587   05FF 22 1A 01    >            LD      (IWAVLEN+(ch*4)), HL    ;                   ' 16    (76)
588   0602                         wait117                     ;                       ' 117   |
588   0602 3E 07       >            LD      A, w            ; 7
588   0604 3D          >            DEC     A               ; 4
588   0605 C2 04 06    >            JP      NZ, .loop       ; 10
588   0608 00          >            NOP
588   0609 00          >            NOP
588   060A 00          >            NOP
589   060B             
590   060B             ; $6E
591   060B                         sampleOutput                ;                       ' 30    |
591   060B D9          >            EXX                     ;                           ' 4
591   060C 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
591   060D 82          >            ADD     D               ; unsign                    ' 4
591   060E 0C          >            INC     C               ; increment with looping    ' 4
591   060F 77          >            LD      (HL), A         ; play sample               ' 7
591   0610 D9          >            EXX                     ;                           ' 4
592   0611                         checkChannelEnd 1           ;                       ' 180   | 223
592   0611 2A 1A 01    >            LD      HL, (IWAVLEN+(ch*4))    ; get sample lenght ' 16
592   0614 7C          >            LD      A, H                    ;                   ' 4
592   0615 B5          >            OR      L                       ;                   ' 4
592   0616 CA 26 06    >            JP      Z, .done                ; sample done ?     ' 10    (34)
592   0619 3E 08       >            LD      A, w            ; 7
592   061B 3D          >            DEC     A               ; 4
592   061C C2 1B 06    >            JP      NZ, .loop       ; 10
592   061F FD 23       >            INC     IY
592   0621 F6 00       >            OR      $0
592   0623 C3 5E 06    >            JP      .end                    ;                   ' 10    (180)
592   0626 21 03 01    >            LD      HL, STATUS+1            ;                   ' 10
592   0629 CB 4E       >            BIT     STATPLAY_SFT+ch, (HL)   ; get status        ' 12
592   062B CA 48 06    >            JP      Z, .stop            ;                       ' 10    (66)
592   062E 2A 08 01    >            LD      HL, (WAVADR+(ch*4))     ;                   ' 16
592   0631 22 18 01    >            LD      (IWAVADR+(ch*4)), HL    ;                   ' 16
592   0634 2A 0A 01    >            LD      HL, (WAVLEN+(ch*4))     ;                   ' 16
592   0637 22 1A 01    >            LD      (IWAVLEN+(ch*4)), HL    ;                   ' 16
592   063A 3E 01       >            LD      A, w            ; 7
592   063C 3D          >            DEC     A               ; 4
592   063D C2 3C 06    >            JP      NZ, .loop       ; 10
592   0640 00          >            NOP
592   0641 00          >            NOP
592   0642 00          >            NOP
592   0643 F6 00       >            OR      $0
592   0645 C3 5E 06    >            JP      .end                ;                       ' 10    (180)
592   0648 2A 28 01    >            LD      HL, (NULLWAVADR)        ;                   ' 16
592   064B 22 18 01    >            LD      (IWAVADR+(ch*4)), HL    ;                   ' 16
592   064E 2A 2A 01    >            LD      HL, (NULLWAVLEN)        ;                   ' 16
592   0651 22 1A 01    >            LD      (IWAVLEN+(ch*4)), HL    ;                   ' 16
592   0654 21 02 01    >            LD      HL, STATUS              ;                   ' 10
592   0657 CB 8E       >            RES     STATPLAY_SFT+ch, (HL)   ; clear status      ' 15
592   0659 21 03 01    >            LD      HL, STATUS+1            ;                   ' 10
592   065C CB 8E       >            RES     STATPLAY_SFT+ch, (HL)   ; clear status      ' 15
593   065E                         wait13                      ;                       ' 13    |
593   065E ED 5F       >            LD      A, R
593   0660 00          >            NOP
594   0661             
595   0661             ; channel 2
596   0661             ; ---------
597   0661             
598   0661             ; $6F
599   0661                         sampleOutput                ;                       ' 30    |
599   0661 D9          >            EXX                     ;                           ' 4
599   0662 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
599   0663 82          >            ADD     D               ; unsign                    ' 4
599   0664 0C          >            INC     C               ; increment with looping    ' 4
599   0665 77          >            LD      (HL), A         ; play sample               ' 7
599   0666 D9          >            EXX                     ;                           ' 4
600   0667                         handlePlayCommand 2         ;                       ' 146   | 223
600   0667 21 00 01    >            LD      HL, COMMAND             ;                   ' 10
600   066A CB 56       >            BIT     COMPLAY_SFT+ch, (HL)    ; play command ?    ' 12
600   066C C2 7B 06    >            JP      NZ, .do_command     ;                       ' 10    (32)
600   066F 3E 06       >            LD      A, w            ; 7
600   0671 3D          >            DEC     A               ; 4
600   0672 C2 71 06    >            JP      NZ, .loop       ; 10
600   0675 ED 5F       >            LD      A, R
600   0677 00          >            NOP
600   0678 C3 91 06    >            JP      .end                ;                       ' 10    (146)
600   067B 21 00 01    >            LD      HL, COMMAND             ;                   ' 10
600   067E CB 96       >            RES     COMPLAY_SFT+ch, (HL)    ; clear command     ' 15
600   0680 2A 0C 01    >            LD      HL, (WAVADR+(ch*4))     ;                   ' 16
600   0683 22 1C 01    >            LD      (IWAVADR+(ch*4)), HL    ;                   ' 16
600   0686 2A 0E 01    >            LD      HL, (WAVLEN+(ch*4))     ;                   ' 16
600   0689 22 1E 01    >            LD      (IWAVLEN+(ch*4)), HL    ;                   ' 16
600   068C 21 02 01    >            LD      HL, STATUS              ;                   ' 10
600   068F CB D6       >            SET     STATPLAY_SFT+ch, (HL)   ; set status        ' 15
601   0691                         prepareVolume 2             ;                       ' 28    |
601   0691 21 26 01    >            LD      HL, WAVVOL+ch       ; point to volume info  ' 10
601   0694 7E          >            LD      A, (HL)             ; A = volume            ' 7
601   0695 F6 10       >            OR      $10                 ; ajusted for LUT       ' 7
601   0697 47          >            LD      B, A                ; save to B             ' 4
602   0698                         wait19                      ;                       ' 19    |
602   0698 00          >            NOP
602   0699 00          >            NOP
602   069A 00          >            NOP
602   069B F6 00       >            OR      $0
603   069D             
604   069D             ; $70
605   069D                         sampleOutput                ;                       ' 30    |
605   069D D9          >            EXX                     ;                           ' 4
605   069E 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
605   069F 82          >            ADD     D               ; unsign                    ' 4
605   06A0 0C          >            INC     C               ; increment with looping    ' 4
605   06A1 77          >            LD      (HL), A         ; play sample               ' 7
605   06A2 D9          >            EXX                     ;                           ' 4
606   06A3                         prepareChannel 2            ;                       ' 182   | 223
606   06A3 21 1C 01    >            LD      HL, IWAVADR+(ch*4)  ; point to sample adr   ' 10
606   06A6 7E          >            LD      A, (HL)             ; A = bit 8-15          ' 7
606   06A7 5F          >            LD      E, A                ; save to E             ' 4
606   06A8 2C          >            INC     L                   ;                       ' 4
606   06A9 17          >            RLA                         ; C flag = bit 15       ' 4
606   06AA 7E          >            LD      A, (HL)             ; A = bit 16-23         ' 7
606   06AB 17          >            RLA                         ; A = bit 15-22         ' 4     (40)
606   06AC 21 00 60    >            LD  HL, BANKREG         ; HL = BANKREG              ' 10
606   06AF 77          >            LD  (HL), A             ; #1 (bit 15)               ' 7
606   06B0 1F          >            RRA                     ;                           ' 4
606   06B1 77          >            LD  (HL), A             ; #2 (bit 16)               ' 7
606   06B2 1F          >            RRA                     ;                           ' 4
606   06B3 77          >            LD  (HL), A             ; #3 (bit 17)               ' 7
606   06B4 1F          >            RRA                     ;                           ' 4
606   06B5 77          >            LD  (HL), A             ; #4 (bit 18)               ' 7
606   06B6 1F          >            RRA                     ;                           ' 4
606   06B7 77          >            LD  (HL), A             ; #5 (bit 19)               ' 7
606   06B8 1F          >            RRA                     ;                           ' 4
606   06B9 77          >            LD  (HL), A             ; #6 (bit 20)               ' 7
606   06BA 1F          >            RRA                     ;                           ' 4
606   06BB 77          >            LD  (HL), A             ; #7 (bit 21)               ' 7
606   06BC 75          >            LD  (HL), L             ; #8 (bit 22 = 0)           ' 7
606   06BD 75          >            LD  (HL), L             ; #9 (bit 23 = 0)           ' 7
606   06BE 7B          >            LD      A, E                ; A = bit 8-15          ' 4
606   06BF F6 80       >            OR      $80                 ; A = $80 | bit 8-14    ' 7
606   06C1 67          >            LD      H, A                ;                       ' 4
606   06C2 AF          >            XOR     A                   ;                       ' 4
606   06C3 6F          >            LD      L, A                ; L = $00               ' 4
606   06C4 F9          >            LD      SP, HL              ; SP = sample src       ' 6
606   06C5 2A 2C 01    >            LD      HL, (WRITEBUF)      ;                       ' 16    (182)
607   06C8 DD 2E 15                LD      IXL, 21             ; prepare loop          ' 11    |
608   06CB             
609   06CB             ; $71-$AF
610   06CB             loop_ch2
611   06CB                         readAndMix12WhilePlay3      ;                       ' 640   |
611   06CB D9          >            EXX                     ;                           ' 4
611   06CC 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
611   06CD 82          >            ADD     D               ; unsign                    ' 4
611   06CE 0C          >            INC     C               ; increment with looping    ' 4
611   06CF 77          >            LD      (HL), A         ; play sample               ' 7
611   06D0 D9          >            EXX                     ;                           ' 4
611   06D1 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2
611   06D2 4B          >            LD      C, E            ; first sample              ' 4     |
611   06D3 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
611   06D4 86          >            ADD     (HL)            ; mix                       ' 7     | 24
611   06D5 E2 DC 06    >            JP      PO, .ok         ; check overflow            ' 10    |
611   06D8 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
611   06DA CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
611   06DC 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
611   06DD 2C          >            INC     L               ; next                      ' 4     |
611   06DE 4A          >            LD      C, D            ; second sample             ' 4     |
611   06DF 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
611   06E0 86          >            ADD     (HL)            ; mix                       ' 7     | 24
611   06E1 E2 E8 06    >            JP      PO, .ok         ; check overflow            ' 10    |
611   06E4 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
611   06E6 CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
611   06E8 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
611   06E9 2C          >            INC     L               ; next                      ' 4     |
611   06EA D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2
611   06EB 4B          >            LD      C, E            ; first sample              ' 4     |
611   06EC 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
611   06ED 86          >            ADD     (HL)            ; mix                       ' 7     | 24
611   06EE E2 F5 06    >            JP      PO, .ok         ; check overflow            ' 10    |
611   06F1 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
611   06F3 CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
611   06F5 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
611   06F6 2C          >            INC     L               ; next                      ' 4     |
611   06F7 4A          >            LD      C, D            ; second sample             ' 4     |
611   06F8 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
611   06F9 86          >            ADD     (HL)            ; mix                       ' 7     | 24
611   06FA E2 01 07    >            JP      PO, .ok         ; check overflow            ' 10    |
611   06FD 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
611   06FF CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
611   0701 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
611   0702 2C          >            INC     L               ; next                      ' 4     |
611   0703 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2 (222)
611   0704 D9          >            EXX                     ;                           ' 4
611   0705 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
611   0706 82          >            ADD     D               ; unsign                    ' 4
611   0707 0C          >            INC     C               ; increment with looping    ' 4
611   0708 77          >            LD      (HL), A         ; play sample               ' 7
611   0709 D9          >            EXX                     ;                           ' 4
611   070A 4B          >            LD      C, E            ; first sample              ' 4     |
611   070B 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
611   070C 86          >            ADD     (HL)            ; mix                       ' 7     | 24
611   070D E2 14 07    >            JP      PO, .ok         ; check overflow            ' 10    |
611   0710 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
611   0712 CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
611   0714 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
611   0715 2C          >            INC     L               ; next                      ' 4     |
611   0716 4A          >            LD      C, D            ; second sample             ' 4     |
611   0717 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
611   0718 86          >            ADD     (HL)            ; mix                       ' 7     | 24
611   0719 E2 20 07    >            JP      PO, .ok         ; check overflow            ' 10    |
611   071C 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
611   071E CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
611   0720 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
611   0721 2C          >            INC     L               ; next                      ' 4     |
611   0722 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2
611   0723 4B          >            LD      C, E            ; first sample              ' 4     |
611   0724 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
611   0725 86          >            ADD     (HL)            ; mix                       ' 7     | 24
611   0726 E2 2D 07    >            JP      PO, .ok         ; check overflow            ' 10    |
611   0729 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
611   072B CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
611   072D 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
611   072E 2C          >            INC     L               ; next                      ' 4     |
611   072F 4A          >            LD      C, D            ; second sample             ' 4     |
611   0730 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
611   0731 86          >            ADD     (HL)            ; mix                       ' 7     | 24
611   0732 E2 39 07    >            JP      PO, .ok         ; check overflow            ' 10    |
611   0735 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
611   0737 CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
611   0739 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
611   073A 2C          >            INC     L               ; next                      ' 4     |
611   073B D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2  |
611   073C 4B          >            LD      C, E            ; first sample              ' 4     | 26 (446)
611   073D FD 23       >            INC     IY
611   073F D9          >            EXX                     ;                           ' 4
611   0740 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
611   0741 82          >            ADD     D               ; unsign                    ' 4
611   0742 0C          >            INC     C               ; increment with looping    ' 4
611   0743 77          >            LD      (HL), A         ; play sample               ' 7
611   0744 D9          >            EXX                     ;                           ' 4
611   0745 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
611   0746 86          >            ADD     (HL)            ; mix                       ' 7     | 24
611   0747 E2 4E 07    >            JP      PO, .ok         ; check overflow            ' 10    |
611   074A 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
611   074C CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
611   074E 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
611   074F 2C          >            INC     L               ; next                      ' 4     |
611   0750 4A          >            LD      C, D            ; second sample             ' 4     | 74 (550)
611   0751 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
611   0752 86          >            ADD     (HL)            ; mix                       ' 7     | 24
611   0753 E2 5A 07    >            JP      PO, .ok         ; check overflow            ' 10    |
611   0756 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
611   0758 CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
611   075A 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
611   075B 2C          >            INC     L               ; next                      ' 4     |
611   075C D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2
611   075D 4B          >            LD      C, E            ; first sample              ' 4     |
611   075E 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
611   075F 86          >            ADD     (HL)            ; mix                       ' 7     | 24
611   0760 E2 67 07    >            JP      PO, .ok         ; check overflow            ' 10    |
611   0763 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
611   0765 CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
611   0767 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
611   0768 2C          >            INC     L               ; next                      ' 4     |
611   0769 4A          >            LD      C, D            ; second sample             ' 4     |
611   076A 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
611   076B 86          >            ADD     (HL)            ; mix                       ' 7     | 24
611   076C E2 73 07    >            JP      PO, .ok         ; check overflow            ' 10    |
611   076F 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
611   0771 CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
611   0773 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
611   0774 2C          >            INC     L               ; next                      ' 4     |
612   0775                         wait11                      ;                       ' 11    | 3*223
612   0775 F6 00       >            OR      $0
612   0777 00          >            NOP
613   0778 DD 2D                   DEC     IXL                 ; 12 samples per loop   ' 8     |
614   077A C2 CB 06                JP      NZ, loop_ch2        ;                       ' 10    |
615   077D             
616   077D             ; $B0
617   077D                         sampleOutput                ;                       ' 30    |
617   077D D9          >            EXX                     ;                           ' 4
617   077E 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
617   077F 82          >            ADD     D               ; unsign                    ' 4
617   0780 0C          >            INC     C               ; increment with looping    ' 4
617   0781 77          >            LD      (HL), A         ; play sample               ' 7
617   0782 D9          >            EXX                     ;                           ' 4
618   0783                         readAndMix2                 ;                       ' 90    | 223
618   0783 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2
618   0784 4B          >            LD      C, E            ; first sample              ' 4     |
618   0785 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
618   0786 86          >            ADD     (HL)            ; mix                       ' 7     | 24
618   0787 E2 8E 07    >            JP      PO, .ok         ; check overflow            ' 10    |
618   078A 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
618   078C CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
618   078E 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
618   078F 2C          >            INC     L               ; next                      ' 4     |
618   0790 4A          >            LD      C, D            ; second sample             ' 4     |
618   0791 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
618   0792 86          >            ADD     (HL)            ; mix                       ' 7     | 24
618   0793 E2 9A 07    >            JP      PO, .ok         ; check overflow            ' 10    |
618   0796 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
618   0798 CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
618   079A 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
618   079B 2C          >            INC     L               ; next                      ' 4     |
619   079C                         readAndMix2                 ; last 4 samples        ' 90    |
619   079C D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2
619   079D 4B          >            LD      C, E            ; first sample              ' 4     |
619   079E 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
619   079F 86          >            ADD     (HL)            ; mix                       ' 7     | 24
619   07A0 E2 A7 07    >            JP      PO, .ok         ; check overflow            ' 10    |
619   07A3 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
619   07A5 CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
619   07A7 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
619   07A8 2C          >            INC     L               ; next                      ' 4     |
619   07A9 4A          >            LD      C, D            ; second sample             ' 4     |
619   07AA 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
619   07AB 86          >            ADD     (HL)            ; mix                       ' 7     | 24
619   07AC E2 B3 07    >            JP      PO, .ok         ; check overflow            ' 10    |
619   07AF 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
619   07B1 CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
619   07B3 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
619   07B4 2C          >            INC     L               ; next                      ' 4     |
620   07B5                         wait13                      ;                       ' 13    |
620   07B5 ED 5F       >            LD      A, R
620   07B7 00          >            NOP
621   07B8             
622   07B8             ; $B1
623   07B8                         sampleOutput                ;                       ' 30    |
623   07B8 D9          >            EXX                     ;                           ' 4
623   07B9 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
623   07BA 82          >            ADD     D               ; unsign                    ' 4
623   07BB 0C          >            INC     C               ; increment with looping    ' 4
623   07BC 77          >            LD      (HL), A         ; play sample               ' 7
623   07BD D9          >            EXX                     ;                           ' 4
624   07BE                         updateChannelData 2         ;                       ' 76    | 223
624   07BE 2A 1C 01    >            LD      HL, (IWAVADR+(ch*4))    ; increment address ' 16
624   07C1 23          >            INC     HL                      ;                   ' 6
624   07C2 22 1C 01    >            LD      (IWAVADR+(ch*4)), HL    ;                   ' 16    (38)
624   07C5 2A 1E 01    >            LD      HL, (IWAVLEN+(ch*4))    ; decrement lenght  ' 16
624   07C8 2B          >            DEC     HL                      ;                   ' 6
624   07C9 22 1E 01    >            LD      (IWAVLEN+(ch*4)), HL    ;                   ' 16    (76)
625   07CC                         wait117                     ;                       ' 117   |
625   07CC 3E 07       >            LD      A, w            ; 7
625   07CE 3D          >            DEC     A               ; 4
625   07CF C2 CE 07    >            JP      NZ, .loop       ; 10
625   07D2 00          >            NOP
625   07D3 00          >            NOP
625   07D4 00          >            NOP
626   07D5             
627   07D5             ; $B2
628   07D5                         sampleOutput                ;                       ' 30    |
628   07D5 D9          >            EXX                     ;                           ' 4
628   07D6 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
628   07D7 82          >            ADD     D               ; unsign                    ' 4
628   07D8 0C          >            INC     C               ; increment with looping    ' 4
628   07D9 77          >            LD      (HL), A         ; play sample               ' 7
628   07DA D9          >            EXX                     ;                           ' 4
629   07DB                         checkChannelEnd 2           ;                       ' 180   | 223
629   07DB 2A 1E 01    >            LD      HL, (IWAVLEN+(ch*4))    ; get sample lenght ' 16
629   07DE 7C          >            LD      A, H                    ;                   ' 4
629   07DF B5          >            OR      L                       ;                   ' 4
629   07E0 CA F0 07    >            JP      Z, .done                ; sample done ?     ' 10    (34)
629   07E3 3E 08       >            LD      A, w            ; 7
629   07E5 3D          >            DEC     A               ; 4
629   07E6 C2 E5 07    >            JP      NZ, .loop       ; 10
629   07E9 FD 23       >            INC     IY
629   07EB F6 00       >            OR      $0
629   07ED C3 28 08    >            JP      .end                    ;                   ' 10    (180)
629   07F0 21 03 01    >            LD      HL, STATUS+1            ;                   ' 10
629   07F3 CB 56       >            BIT     STATPLAY_SFT+ch, (HL)   ; get status        ' 12
629   07F5 CA 12 08    >            JP      Z, .stop            ;                       ' 10    (66)
629   07F8 2A 0C 01    >            LD      HL, (WAVADR+(ch*4))     ;                   ' 16
629   07FB 22 1C 01    >            LD      (IWAVADR+(ch*4)), HL    ;                   ' 16
629   07FE 2A 0E 01    >            LD      HL, (WAVLEN+(ch*4))     ;                   ' 16
629   0801 22 1E 01    >            LD      (IWAVLEN+(ch*4)), HL    ;                   ' 16
629   0804 3E 01       >            LD      A, w            ; 7
629   0806 3D          >            DEC     A               ; 4
629   0807 C2 06 08    >            JP      NZ, .loop       ; 10
629   080A 00          >            NOP
629   080B 00          >            NOP
629   080C 00          >            NOP
629   080D F6 00       >            OR      $0
629   080F C3 28 08    >            JP      .end                ;                       ' 10    (180)
629   0812 2A 28 01    >            LD      HL, (NULLWAVADR)        ;                   ' 16
629   0815 22 1C 01    >            LD      (IWAVADR+(ch*4)), HL    ;                   ' 16
629   0818 2A 2A 01    >            LD      HL, (NULLWAVLEN)        ;                   ' 16
629   081B 22 1E 01    >            LD      (IWAVLEN+(ch*4)), HL    ;                   ' 16
629   081E 21 02 01    >            LD      HL, STATUS              ;                   ' 10
629   0821 CB 96       >            RES     STATPLAY_SFT+ch, (HL)   ; clear status      ' 15
629   0823 21 03 01    >            LD      HL, STATUS+1            ;                   ' 10
629   0826 CB 96       >            RES     STATPLAY_SFT+ch, (HL)   ; clear status      ' 15
630   0828                         wait13                      ;                       ' 13    |
630   0828 ED 5F       >            LD      A, R
630   082A 00          >            NOP
631   082B             
632   082B             ; channel 3
633   082B             ; ---------
634   082B             
635   082B             ; $B3
636   082B                         sampleOutput                ;                       ' 30    |
636   082B D9          >            EXX                     ;                           ' 4
636   082C 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
636   082D 82          >            ADD     D               ; unsign                    ' 4
636   082E 0C          >            INC     C               ; increment with looping    ' 4
636   082F 77          >            LD      (HL), A         ; play sample               ' 7
636   0830 D9          >            EXX                     ;                           ' 4
637   0831                         handlePlayCommand 3         ;                       ' 146   | 223
637   0831 21 00 01    >            LD      HL, COMMAND             ;                   ' 10
637   0834 CB 5E       >            BIT     COMPLAY_SFT+ch, (HL)    ; play command ?    ' 12
637   0836 C2 45 08    >            JP      NZ, .do_command     ;                       ' 10    (32)
637   0839 3E 06       >            LD      A, w            ; 7
637   083B 3D          >            DEC     A               ; 4
637   083C C2 3B 08    >            JP      NZ, .loop       ; 10
637   083F ED 5F       >            LD      A, R
637   0841 00          >            NOP
637   0842 C3 5B 08    >            JP      .end                ;                       ' 10    (146)
637   0845 21 00 01    >            LD      HL, COMMAND             ;                   ' 10
637   0848 CB 9E       >            RES     COMPLAY_SFT+ch, (HL)    ; clear command     ' 15
637   084A 2A 10 01    >            LD      HL, (WAVADR+(ch*4))     ;                   ' 16
637   084D 22 20 01    >            LD      (IWAVADR+(ch*4)), HL    ;                   ' 16
637   0850 2A 12 01    >            LD      HL, (WAVLEN+(ch*4))     ;                   ' 16
637   0853 22 22 01    >            LD      (IWAVLEN+(ch*4)), HL    ;                   ' 16
637   0856 21 02 01    >            LD      HL, STATUS              ;                   ' 10
637   0859 CB DE       >            SET     STATPLAY_SFT+ch, (HL)   ; set status        ' 15
638   085B                         prepareVolume 3             ;                       ' 28    |
638   085B 21 27 01    >            LD      HL, WAVVOL+ch       ; point to volume info  ' 10
638   085E 7E          >            LD      A, (HL)             ; A = volume            ' 7
638   085F F6 10       >            OR      $10                 ; ajusted for LUT       ' 7
638   0861 47          >            LD      B, A                ; save to B             ' 4
639   0862                         wait19                      ;                       ' 19    |
639   0862 00          >            NOP
639   0863 00          >            NOP
639   0864 00          >            NOP
639   0865 F6 00       >            OR      $0
640   0867             
641   0867             ; $B4
642   0867                         sampleOutput                ;                       ' 30    |
642   0867 D9          >            EXX                     ;                           ' 4
642   0868 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
642   0869 82          >            ADD     D               ; unsign                    ' 4
642   086A 0C          >            INC     C               ; increment with looping    ' 4
642   086B 77          >            LD      (HL), A         ; play sample               ' 7
642   086C D9          >            EXX                     ;                           ' 4
643   086D                         prepareChannel 3            ;                       ' 182   | 223
643   086D 21 20 01    >            LD      HL, IWAVADR+(ch*4)  ; point to sample adr   ' 10
643   0870 7E          >            LD      A, (HL)             ; A = bit 8-15          ' 7
643   0871 5F          >            LD      E, A                ; save to E             ' 4
643   0872 2C          >            INC     L                   ;                       ' 4
643   0873 17          >            RLA                         ; C flag = bit 15       ' 4
643   0874 7E          >            LD      A, (HL)             ; A = bit 16-23         ' 7
643   0875 17          >            RLA                         ; A = bit 15-22         ' 4     (40)
643   0876 21 00 60    >            LD  HL, BANKREG         ; HL = BANKREG              ' 10
643   0879 77          >            LD  (HL), A             ; #1 (bit 15)               ' 7
643   087A 1F          >            RRA                     ;                           ' 4
643   087B 77          >            LD  (HL), A             ; #2 (bit 16)               ' 7
643   087C 1F          >            RRA                     ;                           ' 4
643   087D 77          >            LD  (HL), A             ; #3 (bit 17)               ' 7
643   087E 1F          >            RRA                     ;                           ' 4
643   087F 77          >            LD  (HL), A             ; #4 (bit 18)               ' 7
643   0880 1F          >            RRA                     ;                           ' 4
643   0881 77          >            LD  (HL), A             ; #5 (bit 19)               ' 7
643   0882 1F          >            RRA                     ;                           ' 4
643   0883 77          >            LD  (HL), A             ; #6 (bit 20)               ' 7
643   0884 1F          >            RRA                     ;                           ' 4
643   0885 77          >            LD  (HL), A             ; #7 (bit 21)               ' 7
643   0886 75          >            LD  (HL), L             ; #8 (bit 22 = 0)           ' 7
643   0887 75          >            LD  (HL), L             ; #9 (bit 23 = 0)           ' 7
643   0888 7B          >            LD      A, E                ; A = bit 8-15          ' 4
643   0889 F6 80       >            OR      $80                 ; A = $80 | bit 8-14    ' 7
643   088B 67          >            LD      H, A                ;                       ' 4
643   088C AF          >            XOR     A                   ;                       ' 4
643   088D 6F          >            LD      L, A                ; L = $00               ' 4
643   088E F9          >            LD      SP, HL              ; SP = sample src       ' 6
643   088F 2A 2C 01    >            LD      HL, (WRITEBUF)      ;                       ' 16    (182)
644   0892 DD 2E 15                LD      IXL, 21             ; prepare loop          ' 11    |
645   0895             
646   0895             ; $B5-$F3
647   0895             loop_ch3
648   0895                         readAndMix12WhilePlay3      ;                       ' 640   |
648   0895 D9          >            EXX                     ;                           ' 4
648   0896 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
648   0897 82          >            ADD     D               ; unsign                    ' 4
648   0898 0C          >            INC     C               ; increment with looping    ' 4
648   0899 77          >            LD      (HL), A         ; play sample               ' 7
648   089A D9          >            EXX                     ;                           ' 4
648   089B D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2
648   089C 4B          >            LD      C, E            ; first sample              ' 4     |
648   089D 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
648   089E 86          >            ADD     (HL)            ; mix                       ' 7     | 24
648   089F E2 A6 08    >            JP      PO, .ok         ; check overflow            ' 10    |
648   08A2 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
648   08A4 CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
648   08A6 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
648   08A7 2C          >            INC     L               ; next                      ' 4     |
648   08A8 4A          >            LD      C, D            ; second sample             ' 4     |
648   08A9 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
648   08AA 86          >            ADD     (HL)            ; mix                       ' 7     | 24
648   08AB E2 B2 08    >            JP      PO, .ok         ; check overflow            ' 10    |
648   08AE 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
648   08B0 CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
648   08B2 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
648   08B3 2C          >            INC     L               ; next                      ' 4     |
648   08B4 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2
648   08B5 4B          >            LD      C, E            ; first sample              ' 4     |
648   08B6 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
648   08B7 86          >            ADD     (HL)            ; mix                       ' 7     | 24
648   08B8 E2 BF 08    >            JP      PO, .ok         ; check overflow            ' 10    |
648   08BB 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
648   08BD CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
648   08BF 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
648   08C0 2C          >            INC     L               ; next                      ' 4     |
648   08C1 4A          >            LD      C, D            ; second sample             ' 4     |
648   08C2 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
648   08C3 86          >            ADD     (HL)            ; mix                       ' 7     | 24
648   08C4 E2 CB 08    >            JP      PO, .ok         ; check overflow            ' 10    |
648   08C7 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
648   08C9 CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
648   08CB 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
648   08CC 2C          >            INC     L               ; next                      ' 4     |
648   08CD D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2 (222)
648   08CE D9          >            EXX                     ;                           ' 4
648   08CF 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
648   08D0 82          >            ADD     D               ; unsign                    ' 4
648   08D1 0C          >            INC     C               ; increment with looping    ' 4
648   08D2 77          >            LD      (HL), A         ; play sample               ' 7
648   08D3 D9          >            EXX                     ;                           ' 4
648   08D4 4B          >            LD      C, E            ; first sample              ' 4     |
648   08D5 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
648   08D6 86          >            ADD     (HL)            ; mix                       ' 7     | 24
648   08D7 E2 DE 08    >            JP      PO, .ok         ; check overflow            ' 10    |
648   08DA 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
648   08DC CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
648   08DE 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
648   08DF 2C          >            INC     L               ; next                      ' 4     |
648   08E0 4A          >            LD      C, D            ; second sample             ' 4     |
648   08E1 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
648   08E2 86          >            ADD     (HL)            ; mix                       ' 7     | 24
648   08E3 E2 EA 08    >            JP      PO, .ok         ; check overflow            ' 10    |
648   08E6 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
648   08E8 CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
648   08EA 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
648   08EB 2C          >            INC     L               ; next                      ' 4     |
648   08EC D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2
648   08ED 4B          >            LD      C, E            ; first sample              ' 4     |
648   08EE 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
648   08EF 86          >            ADD     (HL)            ; mix                       ' 7     | 24
648   08F0 E2 F7 08    >            JP      PO, .ok         ; check overflow            ' 10    |
648   08F3 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
648   08F5 CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
648   08F7 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
648   08F8 2C          >            INC     L               ; next                      ' 4     |
648   08F9 4A          >            LD      C, D            ; second sample             ' 4     |
648   08FA 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
648   08FB 86          >            ADD     (HL)            ; mix                       ' 7     | 24
648   08FC E2 03 09    >            JP      PO, .ok         ; check overflow            ' 10    |
648   08FF 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
648   0901 CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
648   0903 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
648   0904 2C          >            INC     L               ; next                      ' 4     |
648   0905 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2  |
648   0906 4B          >            LD      C, E            ; first sample              ' 4     | 26 (446)
648   0907 FD 23       >            INC     IY
648   0909 D9          >            EXX                     ;                           ' 4
648   090A 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
648   090B 82          >            ADD     D               ; unsign                    ' 4
648   090C 0C          >            INC     C               ; increment with looping    ' 4
648   090D 77          >            LD      (HL), A         ; play sample               ' 7
648   090E D9          >            EXX                     ;                           ' 4
648   090F 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
648   0910 86          >            ADD     (HL)            ; mix                       ' 7     | 24
648   0911 E2 18 09    >            JP      PO, .ok         ; check overflow            ' 10    |
648   0914 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
648   0916 CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
648   0918 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
648   0919 2C          >            INC     L               ; next                      ' 4     |
648   091A 4A          >            LD      C, D            ; second sample             ' 4     | 74 (550)
648   091B 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
648   091C 86          >            ADD     (HL)            ; mix                       ' 7     | 24
648   091D E2 24 09    >            JP      PO, .ok         ; check overflow            ' 10    |
648   0920 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
648   0922 CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
648   0924 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
648   0925 2C          >            INC     L               ; next                      ' 4     |
648   0926 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2
648   0927 4B          >            LD      C, E            ; first sample              ' 4     |
648   0928 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
648   0929 86          >            ADD     (HL)            ; mix                       ' 7     | 24
648   092A E2 31 09    >            JP      PO, .ok         ; check overflow            ' 10    |
648   092D 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
648   092F CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
648   0931 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
648   0932 2C          >            INC     L               ; next                      ' 4     |
648   0933 4A          >            LD      C, D            ; second sample             ' 4     |
648   0934 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
648   0935 86          >            ADD     (HL)            ; mix                       ' 7     | 24
648   0936 E2 3D 09    >            JP      PO, .ok         ; check overflow            ' 10    |
648   0939 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
648   093B CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
648   093D 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
648   093E 2C          >            INC     L               ; next                      ' 4     |
649   093F                         wait11                      ;                       ' 11    | 3*223
649   093F F6 00       >            OR      $0
649   0941 00          >            NOP
650   0942 DD 2D                   DEC     IXL                 ; 12 samples per loop   ' 8     |
651   0944 C2 95 08                JP      NZ, loop_ch3        ;                       ' 10    |
652   0947             
653   0947             ; $F4
654   0947                         sampleOutput                ;                       ' 30    |
654   0947 D9          >            EXX                     ;                           ' 4
654   0948 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
654   0949 82          >            ADD     D               ; unsign                    ' 4
654   094A 0C          >            INC     C               ; increment with looping    ' 4
654   094B 77          >            LD      (HL), A         ; play sample               ' 7
654   094C D9          >            EXX                     ;                           ' 4
655   094D                         readAndMix2                 ;                       ' 90    | 223
655   094D D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2
655   094E 4B          >            LD      C, E            ; first sample              ' 4     |
655   094F 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
655   0950 86          >            ADD     (HL)            ; mix                       ' 7     | 24
655   0951 E2 58 09    >            JP      PO, .ok         ; check overflow            ' 10    |
655   0954 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
655   0956 CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
655   0958 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
655   0959 2C          >            INC     L               ; next                      ' 4     |
655   095A 4A          >            LD      C, D            ; second sample             ' 4     |
655   095B 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
655   095C 86          >            ADD     (HL)            ; mix                       ' 7     | 24
655   095D E2 64 09    >            JP      PO, .ok         ; check overflow            ' 10    |
655   0960 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
655   0962 CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
655   0964 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
655   0965 2C          >            INC     L               ; next                      ' 4     |
656   0966                         readAndMix2                 ; last 4 samples        ' 90    |
656   0966 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2
656   0967 4B          >            LD      C, E            ; first sample              ' 4     |
656   0968 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
656   0969 86          >            ADD     (HL)            ; mix                       ' 7     | 24
656   096A E2 71 09    >            JP      PO, .ok         ; check overflow            ' 10    |
656   096D 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
656   096F CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
656   0971 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
656   0972 2C          >            INC     L               ; next                      ' 4     |
656   0973 4A          >            LD      C, D            ; second sample             ' 4     |
656   0974 0A          >            LD      A, (BC)         ; compute volume            ' 7     |
656   0975 86          >            ADD     (HL)            ; mix                       ' 7     | 24
656   0976 E2 7D 09    >            JP      PO, .ok         ; check overflow            ' 10    |
656   0979 3E 7F       >            LD      A, $7F          ; fix overflow              ' 7     |
656   097B CE 00       >            ADC     $0              ; A = $7F/$80               ' 7     | +14
656   097D 77          >            LD      (HL), A         ; write sample in buffer    ' 7     | 11 (35)
656   097E 2C          >            INC     L               ; next                      ' 4     |
657   097F                         wait13                      ;                       ' 13    |
657   097F ED 5F       >            LD      A, R
657   0981 00          >            NOP
658   0982             
659   0982             ; $F5
660   0982                         sampleOutput                ;                       ' 30    |
660   0982 D9          >            EXX                     ;                           ' 4
660   0983 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
660   0984 82          >            ADD     D               ; unsign                    ' 4
660   0985 0C          >            INC     C               ; increment with looping    ' 4
660   0986 77          >            LD      (HL), A         ; play sample               ' 7
660   0987 D9          >            EXX                     ;                           ' 4
661   0988                         updateChannelData 3         ;                       ' 76    | 223
661   0988 2A 20 01    >            LD      HL, (IWAVADR+(ch*4))    ; increment address ' 16
661   098B 23          >            INC     HL                      ;                   ' 6
661   098C 22 20 01    >            LD      (IWAVADR+(ch*4)), HL    ;                   ' 16    (38)
661   098F 2A 22 01    >            LD      HL, (IWAVLEN+(ch*4))    ; decrement lenght  ' 16
661   0992 2B          >            DEC     HL                      ;                   ' 6
661   0993 22 22 01    >            LD      (IWAVLEN+(ch*4)), HL    ;                   ' 16    (76)
662   0996                         wait117                     ;                       ' 117   |
662   0996 3E 07       >            LD      A, w            ; 7
662   0998 3D          >            DEC     A               ; 4
662   0999 C2 98 09    >            JP      NZ, .loop       ; 10
662   099C 00          >            NOP
662   099D 00          >            NOP
662   099E 00          >            NOP
663   099F             
664   099F             ; $F6
665   099F                         sampleOutput                ;                       ' 30    |
665   099F D9          >            EXX                     ;                           ' 4
665   09A0 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
665   09A1 82          >            ADD     D               ; unsign                    ' 4
665   09A2 0C          >            INC     C               ; increment with looping    ' 4
665   09A3 77          >            LD      (HL), A         ; play sample               ' 7
665   09A4 D9          >            EXX                     ;                           ' 4
666   09A5                         checkChannelEnd 3           ;                       ' 180   | 223
666   09A5 2A 22 01    >            LD      HL, (IWAVLEN+(ch*4))    ; get sample lenght ' 16
666   09A8 7C          >            LD      A, H                    ;                   ' 4
666   09A9 B5          >            OR      L                       ;                   ' 4
666   09AA CA BA 09    >            JP      Z, .done                ; sample done ?     ' 10    (34)
666   09AD 3E 08       >            LD      A, w            ; 7
666   09AF 3D          >            DEC     A               ; 4
666   09B0 C2 AF 09    >            JP      NZ, .loop       ; 10
666   09B3 FD 23       >            INC     IY
666   09B5 F6 00       >            OR      $0
666   09B7 C3 F2 09    >            JP      .end                    ;                   ' 10    (180)
666   09BA 21 03 01    >            LD      HL, STATUS+1            ;                   ' 10
666   09BD CB 5E       >            BIT     STATPLAY_SFT+ch, (HL)   ; get status        ' 12
666   09BF CA DC 09    >            JP      Z, .stop            ;                       ' 10    (66)
666   09C2 2A 10 01    >            LD      HL, (WAVADR+(ch*4))     ;                   ' 16
666   09C5 22 20 01    >            LD      (IWAVADR+(ch*4)), HL    ;                   ' 16
666   09C8 2A 12 01    >            LD      HL, (WAVLEN+(ch*4))     ;                   ' 16
666   09CB 22 22 01    >            LD      (IWAVLEN+(ch*4)), HL    ;                   ' 16
666   09CE 3E 01       >            LD      A, w            ; 7
666   09D0 3D          >            DEC     A               ; 4
666   09D1 C2 D0 09    >            JP      NZ, .loop       ; 10
666   09D4 00          >            NOP
666   09D5 00          >            NOP
666   09D6 00          >            NOP
666   09D7 F6 00       >            OR      $0
666   09D9 C3 F2 09    >            JP      .end                ;                       ' 10    (180)
666   09DC 2A 28 01    >            LD      HL, (NULLWAVADR)        ;                   ' 16
666   09DF 22 20 01    >            LD      (IWAVADR+(ch*4)), HL    ;                   ' 16
666   09E2 2A 2A 01    >            LD      HL, (NULLWAVLEN)        ;                   ' 16
666   09E5 22 22 01    >            LD      (IWAVLEN+(ch*4)), HL    ;                   ' 16
666   09E8 21 02 01    >            LD      HL, STATUS              ;                   ' 10
666   09EB CB 9E       >            RES     STATPLAY_SFT+ch, (HL)   ; clear status      ' 15
666   09ED 21 03 01    >            LD      HL, STATUS+1            ;                   ' 10
666   09F0 CB 9E       >            RES     STATPLAY_SFT+ch, (HL)   ; clear status      ' 15
667   09F2                         wait13                      ;                       ' 13    |
667   09F2 ED 5F       >            LD      A, R
667   09F4 00          >            NOP
668   09F5             
669   09F5             ; free time here
670   09F5             ; --------------
671   09F5             
672   09F5             ; $F7
673   09F5                         sampleOutput                ;                       ' 30    |
673   09F5 D9          >            EXX                     ;                           ' 4
673   09F6 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
673   09F7 82          >            ADD     D               ; unsign                    ' 4
673   09F8 0C          >            INC     C               ; increment with looping    ' 4
673   09F9 77          >            LD      (HL), A         ; play sample               ' 7
673   09FA D9          >            EXX                     ;                           ' 4
674   09FB DD 2E 07                LD      IXL, 7              ; prepare loop          ' 11    |
675   09FE                         wait182                     ;                       ' 182   |
675   09FE 3E 0C       >            LD      A, w            ; 7
675   0A00 3D          >            DEC     A               ; 4
675   0A01 C2 00 0A    >            JP      NZ, .loop       ; 10
675   0A04 F6 00       >            OR      $0
676   0A06             
677   0A06             ; $F8-FE
678   0A06             loop_freetime
679   0A06                         sampleOutput                ;                       ' 30    |
679   0A06 D9          >            EXX                     ;                           ' 4
679   0A07 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
679   0A08 82          >            ADD     D               ; unsign                    ' 4
679   0A09 0C          >            INC     C               ; increment with looping    ' 4
679   0A0A 77          >            LD      (HL), A         ; play sample               ' 7
679   0A0B D9          >            EXX                     ;                           ' 4
680   0A0C                         wait175                     ;                       ' 175   | 223
680   0A0C 3E 0C       >            LD      A, w            ; 7
680   0A0E 3D          >            DEC     A               ; 4
680   0A0F C2 0E 0A    >            JP      NZ, .loop       ; 10
681   0A12 DD 2D                   DEC     IXL                 ;                       ' 8     |
682   0A14 C2 06 0A                JP      NZ, loop_freetime   ;                       ' 10    |
683   0A17             
684   0A17             ; $FF
685   0A17                         sampleOutput                ;                       ' 30    |
685   0A17 D9          >            EXX                     ;                           ' 4
685   0A18 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
685   0A19 82          >            ADD     D               ; unsign                    ' 4
685   0A1A 0C          >            INC     C               ; increment with looping    ' 4
685   0A1B 77          >            LD      (HL), A         ; play sample               ' 7
685   0A1C D9          >            EXX                     ;                           ' 4
686   0A1D                         swapBuffer                  ; swap buffers          ' 72    |
686   0A1D 2A 2C 01    >            LD      HL, (WRITEBUF)      ;                       ' 16
686   0A20 ED 5B 2E 01 >            LD      DE, (READBUF)       ;                       ' 20
686   0A24 ED 53 2C 01 >            LD      (WRITEBUF), DE      ;                       ' 20
686   0A28 22 2E 01    >            LD      (READBUF), HL       ;                       ' 16
687   0A2B D9                      EXX                         ;                       ' 4     |
688   0A2C ED 4B 2E 01             LD      BC, (READBUF)       ; read buffer           ' 20    | 223
689   0A30 D9                      EXX                         ;                       ' 4     |
690   0A31                         wait83                      ;                       ' 83    |
690   0A31 3E 04       >            LD      A, w            ; 7
690   0A33 3D          >            DEC     A               ; 4
690   0A34 C2 33 0A    >            JP      NZ, .loop       ; 10
690   0A37 00          >            NOP
690   0A38 00          >            NOP
690   0A39 00          >            NOP
690   0A3A 00          >            NOP
690   0A3B 00          >            NOP
691   0A3C C3 A8 02                JP      main_loop           ;                       ' 10    |
692   0A3F             
693   0A3F             
694   0A3F             ; ##############################  functions  ################################
695   0A3F             
696   0A3F                         INCLUDE "z80_fct.i80"   ; basic functions
001+  0A3F             ; ########################### function #############################
002+  0A3F             
003+  0A3F             ; initDAC
004+  0A3F             ; -----------
005+  0A3F             ; HL <-  YMPORT0
006+  0A3F             ; DE <-  $2A80
007+  0A3F             ;
008+  0A3F             ; prepare DAC for output
009+  0A3F             
010+  0A3F             initDAC
011+  0A3F 11 80 2B                LD      DE, $2B80
012+  0A42 CD 4C 0A                CALL    writeYM0        ; enable DAC
013+  0A45 11 80 2A                LD      DE, $2A80
014+  0A48 CD 4C 0A                CALL    writeYM0        ; DAC data to silent
015+  0A4B C9                      RET
016+  0A4C             
017+  0A4C             ; writeYM0 / writeYM1
018+  0A4C             ; -------------------
019+  0A4C             ; D   -> address
020+  0A4C             ; E   -> value
021+  0A4C             ; HL <-  YMPORT0 / YMPORT2
022+  0A4C             ;
023+  0A4C             ; write to YM2612
024+  0A4C             
025+  0A4C             writeYM0
026+  0A4C 21 00 40                LD      HL, YMPORT0
027+  0A4F                         writeYM
027+  0A4F CB 7E       >            BIT     7, (HL)         ; test YM not busy
027+  0A51 20 FC       >            JR      NZ, .wait0
027+  0A53 72          >            LD      (HL), D         ; write address
027+  0A54 CB 7E       >            BIT     7, (HL)         ; test YM not busy
027+  0A56 20 FC       >            JR      NZ, .wait1
027+  0A58 2C          >            INC     L
027+  0A59 73          >            LD      (HL), E         ; write value
028+  0A5A C9                      RET
029+  0A5B             writeYM1
030+  0A5B 21 02 40                LD      HL, YMPORT2
031+  0A5E                         writeYM
031+  0A5E CB 7E       >            BIT     7, (HL)         ; test YM not busy
031+  0A60 20 FC       >            JR      NZ, .wait0
031+  0A62 72          >            LD      (HL), D         ; write address
031+  0A63 CB 7E       >            BIT     7, (HL)         ; test YM not busy
031+  0A65 20 FC       >            JR      NZ, .wait1
031+  0A67 2C          >            INC     L
031+  0A68 73          >            LD      (HL), E         ; write value
032+  0A69 C9                      RET
033+  0A6A             
697   0A6A             
698   0A6A             
699   0A6A                         END
